--
-- author: lv
-- date  : 2021-09-24 11:45:24
-- brief : 活动关卡
--
Activity = Activity or {}

function Activity:SetLevelTopData(topData)
    self._levelTopData = topData or {};
end

function Activity:GetLevelTopData()
    return self._levelTopData;
end

function Activity:InitActivityChapterIds()
    self._activityChapterIds = {}
    local _uid = self:GetOpenActivityLevelId()
    if _uid ~= 0 then
        local _config = self:GetActive_sixthmaintypeConfigByUid(_uid)
        for i, v in ipairs(_config.Story_Level_type) do
            local ids = Chapter:GetChapterIdBySubType(v[1])
            self._activityChapterIds = lua_merge_tables(false, self._activityChapterIds, ids)
        end
    end
end

function Activity:GetActivityChapterIds()
    return self._activityChapterIds
end

--初始化活动关卡数据
function Activity:InitActivityLevelData()
    self._curSelectLevelId = 0;
end

--设置活动关卡layer类型
function Activity:SetActivityLevelLayerType(activityLevelType)
    self._curActivityLevelLayerType = activityLevelType;
end

--获取活动关卡layer类型
function Activity:GetActivityLevelLayerType()
    return self._curActivityLevelLayerType;
end

--获取活动开启的天数
function Activity:GetCurrActivityDay(id)
    local offday= self:GetoffsetDay(id)
    if offday~=nil then
        self.currday = tonumber(CTime:GetOffsetDay()) -tonumber(offday) +1
            return self.currday
        else
            self.currday=0
        return self.currday
    end
end

function Activity:GetCurActivityLevelId()
    return self._curSelectLevelId;
end

function Activity:SetCurActivityLevelId(id)
    if(id == nil or id == 0)then
        AppMgr:LogError("id is null !!  path = **Activity:SetCurActivityLevelId(id)**");
        return;
    end
    self._curSelectLevelId = id;
end

function Activity:CloseCurActivityLevelId()
    self._curSelectLevelId = 0;
end

function Activity:GetActivityLevelIsJump()
    return Activity:GetCurActivityLevelId() ~= nil and Activity:GetCurActivityLevelId() > 0;
end

function Activity:GetOpenWarmUpLevelId() --获取第六封印预热的UID
    local cTimeID = Player:GetWarmUpActivityTimeID()
    local isOpen = CTime:IsOpen(cTimeID)
    if isOpen then
        local activityid= Player:GetWarmUpActivityID()
        local activityCfg =self:GetActivity()
        return activityCfg[activityid].info.UID
       -- return Operation.ActivityID.WarmUp;
    end

    return 0;
end

-- 
-- brief: 获取活动正式开启的UID
-- 
function Activity:GetOpenActivityLevelId()
    if self._all_activity_uid == nil then
        self._all_activity_uid = {
            Operation.ActivityID.SixthSeal,     -- 第六封印
            Operation.ActivityID.fullmoon,      -- 满月祭
        }
    end
    local _config
    for i, uid in ipairs(self._all_activity_uid) do
        _config = self:GetActive_sixthmaintypeConfigByUid(uid)
        if _config ~= nil then
            if Operation:GetActiveIsOpenByUid(_config.ActivechargeUid) then
                return uid
            end
        end
    end
    return 0
end
--获取开启的活动的预告活动id
function Activity:GetactivityOpenId()
    local uid=self:GetOpenWarmUpLevelId()
    if uid >0 then
        return  self:GetActivityIdByUid(uid)
    else
        return 0
    end
end
-------------------------------------------红点相关--------------------------------------------
--获得第一次打开的特殊关卡ID
function Activity:GetFirstOpenSpecialLevelId()
    local retId = 0;
    local chapterIds = Activity:GetActivityChapterIds();
    local curChapter;
    for _, v in ipairs(chapterIds) do
        local chapter = Chapter:GetChapter(v);
        if(CTime:IsOpen(chapter.timeid) and chapter.sub_type == Chapter.MODE_ACTIVITY_LEVEL_SPECIAL)then--深渊关卡, 并且再活动时间内
            curChapter = chapter;
            break;
        end
    end
    if(curChapter == nil)then
        return retId;
    end
    local levels = curChapter.levelids;
    local level;
    for _, levelId in ipairs(levels) do
        level = Chapter:GetLevel(levelId);
        if(not level.open)then
            retId = levelId;
            break;
        end
    end
    return retId;
end

--主界面关卡红点状态
function Activity:GetLevelRedState_Main()
    local chapterIds = Activity:GetActivityChapterIds();
    for _, v in ipairs(chapterIds) do
        local chapter = Chapter:GetChapter(v);
        if(CTime:IsOpen(chapter.timeid) and chapter.sub_type ~= Chapter.MODE_ACTIVITY_LEVEL_SPECIAL)then
            if(Chapter:ChallengRedTip(chapter))then
                return true;
            end
            if(Chapter:OneButtonRedTip(chapter))then
                return true;
            end
        end
    end
    return false;
end

function Activity:GetTaskPool(uid)
    local typeCfg = self:GetActive_sixthmaintypeConfigByUid(uid);
    local lotteryCfg = Lottery:GetLotteryTypeCfg(typeCfg.GashaponListId);
    local taskIds = Task:GetSubTasks(lotteryCfg.taskType);
    if taskIds~=nil then
       return  taskIds
    end
    return  0
end
--主界面Up进度条红点状态
function Activity:GetLevelRedState_UPPool(uid)
    if uid <=0 then
        return false
      end
    local taskIds = self:GetTaskPool(uid)
    local task = nil
    for _, v in ipairs(taskIds) do
        task = Task:GetTask(v);
        if task.state == Task.STATE_HAS_DONE then
            return true
        end
    end
    return false
end

function Activity:GetLevelAllRedState_Main()    --活动正式开启的红点
    local uid= Activity:GetOpenActivityLevelId()
    if uid~=0 then  
        local  Requles={ Activity.ActivityLevelType_Sign,Activity.ActivityLevelType_Common,Activity.ActivityLevelType_Hard}
        for i, v in ipairs(Requles) do
            local  isOpenSign=Activity:GetActivityLevelLayerCfgisOpen(uid ,v)
            if uid > 0 then
                if isOpenSign then
                    return self:IsTaskBetterOper() or Activity:GetLevelRedState_Main() or Activity:GetSixSignstate() or (Activity:GetFirstOpenSpecialLevelId() > 0) or Activity:GetLevelRedState_UPPool(uid)
                else
                  return self:IsTaskBetterOper() or Activity:GetLevelRedState_Main() or Activity:GetLevelRedState_UPPool(uid)--or  (Activity:GetFirstOpenSpecialLevelId() > 0)
                end
            else
                  return false
            end
        end
    end
end

function Activity:IsTaskBetterOper()
    local _uid = self:GetOpenActivityLevelId();
    if _uid <= 0 then return false end

    local _typeCfg = self:GetActive_sixthmaintypeConfigByUid(_uid)
    if _typeCfg == nil then return false end

    return Task:IsBetterOper(nil, tonumber(_typeCfg.Quest_child_class_1[1]))
end

function Activity:GetActivityLevelSaveStr()
    return string.format("%s_ActivityLevel",Player:GetId());
end

function Activity:GetActivityLevelIsFirstOpen()
    --[[if(self._isFirstOpen)then
    end]]--
    self._isFirstOpen = Groble_SceneMgr:PrefsGetString(Activity:GetActivityLevelSaveStr()) == "";
    return self._isFirstOpen;
end

function Activity:SetActivityLevelIsFirstOpen()
    Groble_SceneMgr:PrefsSetString(Activity:GetActivityLevelSaveStr(),"1");
end

function Activity:CloseActivityLevelIsFirstOpen()
    if(not self._isFirstOpen)then
        Groble_SceneMgr:PrefsSetString(Activity:GetActivityLevelSaveStr(),"");
        self._isFirstOpen = true;
    end
end

--获得活动关卡商店倒计时
function Activity:GetActivityLevelShopCountDown()
    local uid = self:GetOpenActivityLevelId();
    if(uid <= 0)then
        return 0;
    end
    local typeCfg = self:GetActive_sixthmaintypeConfigByUid(uid);
    local tempCfg = Operation:GetActiveCfgByUID(typeCfg.ActivechargeUid);
    if(tempCfg.openConditions ~= Operation.OpenConditionType.Null)then
        if(tempCfg.openConditions[1][1] == Operation.OpenConditionType.Time)then
            return CTime:GetRemainTime(tempCfg.openConditions[1][2]);
        end
    end
    return 0;
end