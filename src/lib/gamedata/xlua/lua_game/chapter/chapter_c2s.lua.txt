--
-- author: haosun
-- date  : 2018-11-12 12:01:16
-- brief : 
--
Chapter = Chapter or {}
-- 副本数据同步
function Chapter:SyncChapter(data)
    if Network:IsNotHandleNotify() then return end
    
    AppMgr:LogInfo("----------副本数据同步----------")
    for _, v in pairs(data.dungeons) do
        self:_AddNewChapter(v)        
    end
    -- 计算最新可打的普通剧情章节-关卡
    self:CalcNewPlotChapterLevel()
    
    -- 刷新所有章节是否开启
    self:refreshOpenChapters()

    for _, v in pairs(data.levels) do
        self:_AddNewLevel(v)
    end

    -- 客户端刷新开启的关卡
    Player:InitUnlockSys()
    self:SetShenYeChapterId(data.shenye_dungeon_id)
    -- 爬塔数据
   -- Tower:SetData(data.tower)

    -- 幽暗秘境
    Mystery:SetMystery(data.rift_data, data.rift_level_ids, data.rift_emy_buffs)
    Ether:SetServerData(data.yt_frontier);
    --触发关
    Chapter:SetTriggerData(data.trigger_data);

    self:InitChapterTips()
    self:SetCurSelectChapterId(0)
    self._triggerLevelId = 0

    self._autoFightParam.auto = false
end

function Chapter:_AddNewChapter(data)
    local chapter = self:GetChapter(data.id)
    if chapter ~= nil then
        chapter.open        = true
        chapter.levelid     = data.levelid
        chapter.has_star    = data.star_sum
        chapter.pass_count  = data.day_pass_count
        chapter.pass        = data.levelid == 0
        chapter.fight_buy   = data.ex_count or 0
        for _, tmp in pairs(data.stage_rewards) do
            chapter.rewards[tmp.stage].state = tmp.reward
        end        
    end
end

function Chapter:_AddNewLevel(data)
    if data ~= nil and self._levels[data.id] ~= nil then
        local level         = self._levels[data.id]
        level.open          = true
        level.pass_star     = data.pass_star
        level.receive       = data.star_reward
        level.pass_count    = data.day_pass_count
        level.remain        = level.fight_count - data.day_pass_count
        level.max_score     = data.max_score   --活动关最高得分
        level.p_rate        = data.p_rate
        self:_SetLevelStar(level)
    end
end

function Chapter:_SetLevelStar(level)
    level.has_star = self:_GetStarNumber(level.pass_star)
    level.sweep = level.has_star == Chapter.LEVEL_STAR_NUM
end

function Chapter:SetTriggerData(data)
    if(data == nil)then
        self._triggerLevels = {};
        return;
    end
    self._triggerLevels = data.t_list or {};
end

function Chapter:UnlockChapterRep(data)
    self:_AddNewChapter(data)
end



function Chapter:ChapterLevelBeginReq(levelid, heroids, floor,affixs, feelWallId)
    self._tmphids = heroids or self:GetFightHeroIds(levelid)
    local isPlot = Chapter:IsPlotHero(levelid)


    if not isPlot then --如果不是首次剧情魔女
        self:SetFightHeroIds(levelid, self._tmphids)
    end
    self:SetCurFightLevelId(levelid)
    if not self:IsConformBattleCondition(levelid) then
        return false
    end
    local level = self:GetLevel(levelid);
    if(level.equipMax == 0)then
        if Equip:GetEquipNumWhetherMax() then
            Groble_UIMgr:ShowMessageBox(true, true, LanguageMgr:GetTextByID(880018), function()
                self:_doChapterLevelBeginReq(levelid, self._tmphids, floor,affixs,feelWallId)
            end)
            return false
        else
            self:_doChapterLevelBeginReq(levelid, self._tmphids, floor,affixs,feelWallId)
            return true
        end
    else
        self:_doChapterLevelBeginReq(levelid, self._tmphids, floor,affixs,feelWallId)
        return true
    end
end

function Chapter:_doChapterLevelBeginReq(levelid, heroids, floor,affixs,feelWallId)
    if self:LevelIsMystery(levelid) then
        floor = floor or Mystery:GetFightFloor()
        Mystery:SetFightFloor(floor)
    end
    self._feelWallId = feelWallId
    self._multipleValue = 1
    if self:IsAutoFight() then
        self._multipleValue = self._autoFightParam.multipleValue
    end
    Network:CallServerScript({c2s.DUNGEON_BEGIN_LEVEL_REQ , levelid, self._tmphids, "1.0.0", floor or 0,
        affixs or {}, feelWallId, self._multipleValue})
end

function Chapter:ChapterLevelBeginRep(levelid, servertime, baseAttr, addAttr)
    -- 服务器魔女属性数值
    self:SetServerHeroAttr(baseAttr)
    -- 当前战斗关卡
    self:SetCurFightLevelId(levelid)
    -- 托管检测
    self:_checkAutoFight()
    -- 引导检测
    Guide:CheckGuideByLevelId(levelid)
    --FightModule:SetLevelHp(Tower:GetBossHp(levelid)/100)
    -- 幽暗秘境词缀
    FightModule:SetLevelWords(Mystery:GetFightWordBuffIds())
    -- 数据统计
    -- CS.Logger.LogWarning("~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~:ChapterLevelBeginRep~~~~~")
    --设置返回界面为出战界面
    GTemp:SetMainTypeLayer(MAIN_BUTTON_TYPE.TYPE_PLOT)
    GEvent:fireEvent(EVENT_NAME.CHAPTER_LEVEL_BEGIN, levelid)

    Chapter:TrackStartBattle(levelid)

    self:SaveLevelTips(levelid)

    --深夜或圣光开始时需要清空关卡用时
    if(self:CurFightModeIsShenYe() or self:CurFightModeIsWorldBoss())then
        UpLoadVideo:CloseVideoTime(self._usingtime);
    end

end

function Chapter:TrackStartBattle(levelid)
    self._battle_begin_time_long = CTime:GetServerTime()
    self._battle_begin_time = CTime:UTime2Str(self._battle_begin_time_long)

    local levelCount = 0
    local starCount = 0
    local friendlinessCount = 0
    local awakenCount = 0
    local rNum = 0
    local srNum = 0
    local ssrNum = 0
    local levelEquipNum = 0
    local skillLevel1, skillLevel2, skillLevel3 = 0, 0, 0
    local heroNum = 0 
    -- lua_table_print(self._tmphids)
    for k,v in pairs(self._tmphids) do
        if v ~= 0 then
            local hero = Hero:GetHero(v)
            heroNum = heroNum + 1
            levelCount = levelCount + Hero:GetHeroLevel(v)
            starCount = starCount + Hero:GetHeroStar(v)
            friendlinessCount = friendlinessCount + Hero:GetHeroFavorLevel(v)
            awakenCount = awakenCount + Hero:GetHeroFavorUpLevel(v)
            local heroRNum, heroSRNum, heroSSRNum, heroLevelEquipNum = Hero:GetSuitNum(v)
            rNum = rNum + heroRNum
            srNum = srNum + heroSRNum
            ssrNum = ssrNum + heroSSRNum
            levelEquipNum = levelEquipNum + heroLevelEquipNum
            skillLevel1 = skillLevel1 + hero.skills[1].level
            skillLevel2 = skillLevel2 + hero.skills[2].level
            skillLevel3 = skillLevel3 + hero.skills[3].level
        end
    end

    local average_level = levelCount / heroNum
    local average_star = starCount / heroNum
    local average_friendliness = friendlinessCount / heroNum
    local awaken_number = awakenCount / heroNum
    local r_rune_number = rNum
    local sr_rune_number = srNum
    local ssr_rune_number = ssrNum
    local average_rune_level = levelEquipNum == 0 and 0 or (levelEquipNum / (rNum + srNum + ssrNum))
    local average_1_skill = skillLevel1 / heroNum
    local average_2_skill = skillLevel2 / heroNum
    local average_3_skill = skillLevel3 / heroNum
    -- CS.Logger.LogError("上报数据, average_level = {0}", average_level)
    -- CS.Logger.LogError("上报数据, average_star = {0}", average_star)
    -- CS.Logger.LogError("上报数据, average_friendliness = {0}", average_friendliness)
    -- CS.Logger.LogError("上报数据, awaken_number = {0}", awaken_number)
    -- CS.Logger.LogError("上报数据, r_rune_number = {0}", r_rune_number)
    -- CS.Logger.LogError("上报数据, sr_rune_number = {0}", sr_rune_number)
    -- CS.Logger.LogError("上报数据, ssr_rune_number = {0}", ssr_rune_number)
    -- CS.Logger.LogError("上报数据, average_rune_level = {0}", average_rune_level)
    -- CS.Logger.LogError("上报数据, average_1_skill = {0}", average_1_skill)
    -- CS.Logger.LogError("上报数据, average_2_skill = {0}", average_2_skill)
    -- CS.Logger.LogError("上报数据, average_3_skill = {0}", average_3_skill)
    local level = Chapter:GetLevel(levelid)
    local chapter = Chapter:GetChapter(level.chapterid)
    local param = {
        battle_type         = chapter.sub_type,
        level_id            = levelid,
        is_first            = self._curPlotLevel.levelId == levelid,
        succuba_id_list     = self._tmphids,
        average_level       = average_level,
        average_star        = average_star,
        average_friendliness= average_friendliness,
        awaken_number       = awaken_number,
        r_rune_number       = r_rune_number,
        sr_rune_number      = sr_rune_number,
        ssr_rune_number     = ssr_rune_number,
        average_rune_level  = average_rune_level,
        average_1_skill     = average_1_skill,
        average_2_skill     = average_2_skill,
        average_3_skill     = average_3_skill
    }

    ThinkingMgr:SendTrack("pve_battle_begin", param)
end


-- items = {id=num, ...}
-- data  = {
    -- all_score
    -- bullet_score
    -- level_score
    -- usingtime
    -- success
    -- star
    -- skill_num
-- }
function Chapter:ChapterLevelEndReq(success, params)
    -- stars = {true, false, true}
    if uimgr:GetSceneId() ~= uimgr.FIGHT_SCENE_ID then
        UIController:RemoveTimerId()
        return
    end
    if HeroController:HeroAttrCheck() then
        UIController:RemoveTimerId()
        return
    end

    local star = 0
    for i, v in ipairs(params.star) do
        if v then
            star = star | Chapter.LEVEL_STAR[i]
        end
    end
    local clockid = 0
    if self:CurFightModeIsShenYe() then
        clockid = Clock:GetUsingClock(Clock.CLOCK_TYPE_SY) or 0
    end
    -- 关卡结束请求需要参数：是否胜利、通关星数、通关成就、总得分、关卡用时、击杀怪物、获得物品、闹钟id、擦弹分数、使用技能次数、爬塔魔女剩余血量、爬塔BOSS血量    
    -- CS.Logger.LogWarning("~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~:ChapterLevelEndReq~~~~~")
    -- if self:CurFightModeIsTower() then
    --     Tower:SetHpPer(tower_hero)
    --     Tower:SetBossHp(self._inFightLevelId, boss_hp)
    -- end
    --日常关记录
    if success == Chapter.LEVEL_END_SUCCESS  then
        local level = self:GetLevel(self._inFightLevelId)
        local chapter = self:GetChapter(level.chapterid)
        if chapter.main_type == Chapter.SHOW_TYPE_DAILY   then
            if params.all_score > level.max_score then
                level.max_score =  params.all_score
            end
        end
    end
    self._usingtime = params.usingtime
    Network:CallServerScript({c2s.DUNGEON_END_LEVEL_REQ, success, star, 0,
                              params.all_score, params.usingtime, params.enemys, {}, clockid,
        params.bullet_score, params.skill_num or 0, params.maxSecDps})
end

function Chapter:ChapterLevelQuit()
    Network:CallServerScript({c2s.DUNGEON_END_LEVEL_REQ, Chapter.LEVEL_END_QUIT})
end

-- {
--     success=success, 
--     level = level,
--     next_level = levelid(解锁的下一关卡),
--     drops={},
--     star_reward=state,
--     add_star = addstar,
--     cg_drops(挑战奖励) = {}
--     clock_drops(闹钟掉落) = {}
--     is_first = true or false
--     rift_drops = {}
--     rift_buffs_choose = {id1,id2,id3} or nil
--     2020-12-8 分数掉落合并至普通掉落
--     time_drops 2021-11-7 增加全局掉落
-- }
function Chapter:ChapterLevelEndRep(param)
    local tempdata = GTemp:GetFightTmpData()
    if tempdata == nil then
        UIController:RemoveTimerId()
        return
    end
    
    local ret = {
        drops       = {},
        cg_drops    = {},
        boss_drops  = lua_deep_copy(param.boss_drops),
        exp         = 0,
        result      = param.success,
        levelid     = self._inFightLevelId,
        bfirst      = param.is_first,
        trigger     = param.new_trigger,
        add_star    = param.add_star,
    }
    
    tempdata.settleState = true
    UIController:RemoveTimerId()
    if param.success == Chapter.LEVEL_END_SUCCESS then
        PrefsController:AddPassLevelNumber(self._inFightLevelId)
        if(Chapter:CurFightModeIsTrigger())then--触发关卡
            if self._feelWallId then
                table.remove(self._triggerLevels,self._feelWallId);
            end
        else
            if(ret.trigger ~= nil)then
                table.insert(self._triggerLevels,ret.trigger);
            end
        end
        self:addLevelSubTypePassNumber(self._inFightLevelId)
        Operation:CheckTriggerPackageByMainTypes({Operation.TRIGGER_GIFT_TYPE_PASS_LEVEL, Operation.TRIGGER_GIFT_TYPE_FIGHT_TYPE})
        GZSDKHelper:stageFlowWithPlayerInfo(self._inFightLevelId, "战斗胜利", self._usingtime)
    else
        GZSDKHelper:stageFlowWithPlayerInfo(self._inFightLevelId, "战斗失败", self._usingtime)
    end

    --深夜或圣光需要记录关卡用时
    if(self:CurFightModeIsShenYe() or self:CurFightModeIsWorldBoss())then
        UpLoadVideo:SetVideoTime(self._usingtime);
        UpLoadVideo:SetHeroData(Chapter:GetFightHeroIds(self._inFightLevelId));
    end

    if self:CurFightModeIsShenYe() then
        ret.result = param.success
        local exp, tmpdrops = self:drops2Items(param.clock_drops)
        ret.clock_drops = lua_deep_copy(tmpdrops)
        ret.drops = param.drops
        Buff:ClearRankBuffs()
        if(MidNight:RankIsChange(tempdata.all_score))then
            MidNight:MidNightRankChange(tempdata.all_score);
        end
    else
        local chapter = self:GetChapterByLevelId(ret.levelid)
        if(chapter.main_type == Chapter.FIGHT_TYPE_ETHER)then
            if ret.result == Chapter.LEVEL_END_SUCCESS then--胜利,替换以太本低数据
                Ether:SaveChapterData();
            end
        end
        if self:LevelIsMemory(self._inFightLevelId) then
            self:ClearJumpChapterLevel()
        end
        Guide:FightEndCommit(self._inFightLevelId)
        local level = self:GetLevel(self._inFightLevelId)
        if param.success == Chapter.LEVEL_END_SUCCESS then
            if self:LevelIsMystery(self._inFightLevelId) then
                Buff:UpdateMysteryChooseBuff(param.rift_buffs_choose)
                Mystery:UpdateMysteryData()
            end
            if level.pass_star == 0 and self._inFightLevelId == Operation.TRIGGER_ONCE_PASS_LEVEL then
                if Operation:IsFirstNotPurchased() then
                    Operation:SetAutoShowFirstPayLayer()
                end
            end
            self:OnLevelSucc(self._inFightLevelId, 1 * self._multipleValue)

            if param.level ~= nil then
                self:_AddNewLevel(param.level)
                Stats:UpdateStatsCount(Stats.STATS_TYPE_PASS_LEVEL)
            elseif param.p_rate_change ~= nil then
                level.p_rate = level.p_rate or {}
                for k, v in pairs(param.p_rate_change) do
                    level.p_rate[k] = v
                end
            end

            if param.star_reward ~= nil then
                level.receive = param.star_reward
            end

            if param.next_level ~= nil then
                -- chapter.open = true
                chapter.levelid = param.next_level
                chapter.pass = param.next_level == 0
                if param.next_level == 0 then
                    self:refreshOpenChapters()
                end
            end

            if param.add_star ~= nil then
                level.pass_star = level.pass_star | param.add_star
                self:_SetLevelStar(level)
            end

            ret.hasdrops = false

            local exp, tmpdrops = self:drops2Items(param.drops)
            ret.exp = ret.exp + exp
            ret.drops = lua_deep_copy(tmpdrops)
            ret.hasdrops = ret.hasdrops or #tmpdrops > 0
            
            local exp, tmpdrops = self:drops2Items(param.cg_drops)
            ret.exp = ret.exp + exp
            ret.cg_drops = lua_deep_copy(tmpdrops)
            ret.hasdrops = ret.hasdrops or #tmpdrops > 0
            
            local exp, tmpdrops = self:drops2Items(param.first_drops)
            ret.exp = ret.exp + exp
            ret.first_drops = lua_deep_copy(tmpdrops)
            ret.hasdrops = ret.hasdrops or #tmpdrops > 0

            -- 秘境挑战奖励
            if param.rift_drops ~= nil and next(param.rift_drops) ~= nil then
                exp, tmpdrops = self:drops2Items(param.rift_drops)
                ret.exp = ret.exp + exp
                ret.cg_drops = lua_deep_copy(tmpdrops)
            end
            -- 全局掉落（时间控制）
            if param.time_drops ~= nil and next(param.time_drops) ~= nil then
                local exp, tmpdrops = self:drops2Items(param.time_drops)
                ret.exp = ret.exp + exp
                ret.time_drops = lua_deep_copy(tmpdrops)
                ret.hasdrops = ret.hasdrops or #tmpdrops > 0
            end

            -- 计算章节的星数
            self:CalcChapterStars(chapter.id)
            Stats:UpdateStatsCount(Stats.STATS_TYPE_LEVEL_STAR)

            if(param.success == Chapter.LEVEL_END_SUCCESS)then
                -- 战斗胜利并且是剧情模式,设置剧情进度
                if chapter.sub_type == Chapter.MODE_PLOT_N then
                    self:CalcNewPlotChapterLevel()
                end
            end
        end
    end
    if self:IsAutoFight() then
        if param.success == Chapter.LEVEL_END_SUCCESS then
            self:AddAutoSuccNumber()
        else
            self:AddAutoFailNumber()
        end
        self:AddAutoItems(ret.drops, ret.cg_drops, ret.first_drops, ret.time_drops)
        if Equip:GetEquipNumWhetherMax() then
            self:StopAutoFight(Chapter.AUTO_STOP_EQUIP_MAX)
        end
    end
    -- CS.Logger.LogWarning("~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~:ChapterLevelEndRep~~~~~")
    UIController:HandleFightResult(ret)
    Chapter:TrackEndBattle(ret)
end
function Chapter:GetAllFight(list)
    local all = 0
    for i = 1, #list do
        all = all + list[i]
    end
    return all
end
function Chapter:TrackEndBattle(ret)
    local level = Chapter:GetLevel(ret.levelid)
    local chapter = Chapter:GetChapter(level.chapterid)
    local endTime = CTime:GetServerTime()
    local tmpData = GTemp:GetFightTmpData()
    local heroId = {}
    local powerArr = {}
    local fightList = Hero:GetHeroFight()
    local allFight = self:GetAllFight(fightList)
     local FightTmpData= GTemp:GetFightTmpData()
    for k,v in pairs(self._tmphids) do
        if not v or v == 0 then
            table.insert(powerArr, 0)
            table.insert(heroId, 0)
        else
            table.insert(heroId, v)
            local heroCapa = Hero:GetFightingCapacity(v)
            table.insert(powerArr, heroCapa)
        end
    end
    local param = {
        battle_type         = chapter.sub_type,
        battle_begin_time   = self._battle_begin_time,
        level_id            = ret.levelid,
        succuba_id_list     = self._tmphids,
        final_id_list       = 1, ---------------------临时数据
        is_first            = ret.bfirst,
        is_first_win        = ret.bfirst and ret.result == Chapter.LEVEL_END_SUCCESS,
        is_win              = ret.result == Chapter.LEVEL_END_SUCCESS,
        running_time        = endTime - self._battle_begin_time_long,
        get_star            = ret.add_star or 0,
        total_score         = tmpData.all_score,
        wipe_score          = tmpData.bullet_score,
        level_score         = tmpData.level_score,
        total_defeat_number = tmpData.skill_num,
        buff_choose         = 0,
        difficulty_level    = 0,
        succuba_1_point     = powerArr[1] or 0,
        succuba_2_point     = powerArr[2] or 0,
        succuba_3_point     = powerArr[3] or 0,
        final_1_id          = heroId[1],
        final_2_id          = heroId[2],
        final_3_id          = heroId[3],
        succuba_1_level     = 0,    --1号位魔女等级
        succuba_2_level     = 0,    --2号位魔女等级
        succuba_3_level     = 0,    --3号位魔女等级
        succuba_1_damage    = 0,    --1号位魔女伤害占比
        succuba_2_damage    = 0,   --2号位魔女伤害占比
        succuba_3_damage    = 0,   --3号位魔女伤害占比
        -- succuba_1_time      =     ""                            , --1号位魔女上场时间占比
        -- succuba_2_time      =     ""                            , --2号位魔女上场时间占比
        -- succuba_3_time      =     ""                            , --3号位魔女上场时间占比
        time_score          =   FightTmpData.timeScore          ,    --时间得分
        kill_score          =   FightTmpData.enemyScore        ,     --击杀得分
        hit_score           =   FightTmpData.bullet_score      ,     --伤害得分
    }
    if self._tmphids[1] ~= 0 then
        param.succuba_1_level = Hero:GetHeroLevel(self._tmphids[1])
        param.succuba_1_damage = math.ceil(fightList[1]/allFight*100)
    end
    if self._tmphids[2] ~= 0 then
        param.succuba_2_level = Hero:GetHeroLevel(self._tmphids[2])
        param.succuba_2_damage = math.ceil(fightList[2]/allFight*100)
    end
    if self._tmphids[3] ~= 0 then
        param.succuba_3_level = Hero:GetHeroLevel(self._tmphids[3])
        param.succuba_3_damage = math.ceil(fightList[3]/allFight*100)
    end
    ThinkingMgr:SendTrack("pve_battle_end", param)
end

function Chapter:drops2Items(drops)
    local tmpdrops = {}
    local exp = 0
    for itype, items in pairs(drops or {}) do
        for uid, count in pairs(items) do
            if itype == Bag.TYPE_ITEM and uid == Player.ITEM_VALUE_EXP then
                exp = exp + count
            else
                tmpdrops[uid] = {itype, uid, count}
            end
        end
    end
    local ret = {}
    for _, v in pairs(tmpdrops) do
        local sortid = v[2]
        if v[1] == Bag.TYPE_EQUIP then
            local equip = Equip:GetEquip(v[2])
            sortid = 1000000000 + tonumber(equip.cfgid)
        end
        table.insert(ret, {v[1], v[2], v[3], sortid})
    end
    table.sort(ret, function(a, b)
            return a[4] < b[4]
        end)
    return exp, ret
end

function Chapter:LevelSweepReq(levelid, count, teamHeroIds, callback, show, islevelup)
    if levelid == nil or count == nil then
        return false
    end
    self._showSweep = show 
    if false == self:IsConformBattleCondition(levelid) then
        return false
    end
    Player:SetOldInfo()
    Player:IgnoreLevelUp(true)
    self._sweepInfo = lua_deep_copy(Player:GetOldLvExp())
    levelid = tonumber(levelid)
    count = tonumber(count)
    self._sweepback = callback

    Network:CallServerScript({c2s.DUNGEON_MOP_UP_REQ , levelid, count, teamHeroIds})
    return true
end

function Chapter:LevelSweepRep(levelid, count, drops,new_trigger)
    self:OnLevelSucc(levelid, count)
    if self._sweepback ~= nil then
        self._sweepback()
    end
    if self._showSweep == false then
        local items = Bag:MergeSweepDrops(drops)
        SingletonMgr:ShowGetTipsLayer(items)
    else
        local arr = Bag:SweepDrop2Arr(drops)
        local sweeplayer = core.require("xlua/lua_UI/HomeScene/SweepLayer.txt"):new()
        sweeplayer:show(arr, levelid, self._sweepback, self._sweepInfo)
    end
    GEvent:fireEvent(EVENT_TYPE.UPDATE_CURRENCY)
    --GEvent:fireEvent(EVENT_TYPE.SCRIPT_ACTION, EVENT_NAME.SWEEP_LEVEL)
    if(new_trigger ~= nil)then
        table.insert(self._triggerLevels,new_trigger);
    end

    ThinkingMgr:SendTrack("mop_up", {
        mop_up_number   = count,
        mop_up_id       = levelid
    })
end

function Chapter:OnLevelSucc(levelid, count)
    local level = self:GetLevel(levelid)
    level.pass_count = level.pass_count + count
    level.remain = level.remain - count
    local chapter = self:GetChapterByLevelId(levelid)
    chapter.pass_count = chapter.pass_count + count
end

function Chapter:LevelThreeStarRewardReq(levelids)
    Network:CallServerScript({c2s.DUNGEON_THREE_STAR_RD_REQ , levelids})
end

function Chapter:LevelThreeStarRewardRep(levelids)
    for _,levelid in pairs(levelids) do
        local level = self:GetLevel(levelid)
        level.receive = Chapter.REWARD_STATE_HAS
    end
    GEvent:fireEventByEvt(EVENT_TYPE.SCRIPT_ACTION, EVENT_NAME.LEVEL_REWARD_RECVED, levelids)
    Guide:RecoverGuide()
end

function Chapter:ChapterStarRewardReq(chapterid, stage)
    if chapterid == nil then
        return
    end
    chapterid = tonumber(chapterid)
    Network:CallServerScript({c2s.DUNGEON_STAR_STAGE_RD_REQ , chapterid, stage})
end

function Chapter:ChapterStarRewardRep(chapterid, stage)
    local chapter = self:GetChapter(chapterid)

    for _, v in ipairs(chapter.rewards) do
        if v.stage == stage then
            v.state = Chapter.REWARD_STATE_HAS
            break
        end
    end

    GEvent:fireEventByEvt(EVENT_TYPE.SCRIPT_ACTION, EVENT_NAME.CHAPTER_REWARD_RECVED)
end

function Chapter:RankChapterNotify(chapterid)
    self:SetShenYeChapterId(chapterid)
end

--
-- brief 购买奖励次数请求
-- cid 章节ID
--
function Chapter:ChapterRewardCountReq(cid)
    Network:CallServerScript({c2s.DUNGEON_ADD_DUNGEON_COUNT_REQ, cid})
end

--
-- brief 购买奖励次数响应
-- cid 章节ID
-- remain 当前剩余次数
--
function Chapter:ChapterRewardCountRep(cid, cost)
    local chapter = self:GetChapter(cid)
    chapter.fight_buy = chapter.fight_buy + 1
    GEvent:fireEventByEvt(EVENT_TYPE.SCRIPT_ACTION, EVENT_NAME.CHAPTER_FIGHT_BUY)
end

function Chapter:WhiteNightFlipReq(itype,index)
    Network:CallServerScript({c2s.POKERCARD_USE_CHANCE_REQ,itype,index});
end

function Chapter:WhiteNightFlipRep(itype,index,drops)
    GEvent:fireEventByEvt(EVENT_TYPE.SCRIPT_ACTION, EVENT_NAME.FLIP_REP,{flipType = itype,index = index,drops = drops});
end

----------------------------------------注册回调----------------------------------------
c2s[c2s.DUNGEON_DATA_SYNC]              = {Chapter, Chapter.SyncChapter}
c2s[c2s.DUNGEON_UNLOCK_NTF]             = {Chapter, Chapter.UnlockChapterRep}
c2s[c2s.DUNGEON_BEGIN_LEVEL_RES]        = {Chapter, Chapter.ChapterLevelBeginRep}
c2s[c2s.DUNGEON_END_LEVEL_RES]          = {Chapter, Chapter.ChapterLevelEndRep}
c2s[c2s.DUNGEON_MOP_UP_RES]             = {Chapter, Chapter.LevelSweepRep}
c2s[c2s.DUNGEON_THREE_STAR_RD_RES]      = {Chapter, Chapter.LevelThreeStarRewardRep}
c2s[c2s.DUNGEON_STAR_STAGE_RD_RES]      = {Chapter, Chapter.ChapterStarRewardRep}
c2s[c2s.DUNGEON_SHENYE_ID_CHANGE_NTF]   = {Chapter, Chapter.RankChapterNotify}
c2s[c2s.DUNGEON_ADD_DUNGEON_COUNT_RES]  = {Chapter, Chapter.ChapterRewardCountRep}
c2s[c2s.POKERCARD_USE_CHANCE_RES]       = {Chapter, Chapter.WhiteNightFlipRep}