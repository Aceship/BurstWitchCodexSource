--
-- author: haosun
-- date  : 2018-11-11 11:35:47
-- brief : 
--

-- 加载配置
function Chapter:_LoadConfig()  
    self:_LoadLevels()
    self:_LoadChapters()
    self:_LoadChapterHeros()
    self:_InitConfig()
    self:_LoadScoreDrop()
    self:_LoadDungeonGrade()
    self:_LoadChapterMode()
end

function Chapter:_LoadChapterMode()
    self._modes = {
        [Chapter.SHOW_TYPE_PLOT]     = {},    -- 剧情模式
        [Chapter.SHOW_TYPE_DAILY]    = {},    -- 日常挑战模式
        [Chapter.SHOW_TYPE_ACTIVITY] = {},    -- 活动模式
    }
    local configs = CfgLoader:LoadCfg("DungeonMode")
    local mode
    for _, v in pairs(configs) do
        mode = tonumber(v.Show_type)
        if mode == Chapter.SHOW_TYPE_PLOT or mode == Chapter.SHOW_TYPE_DAILY or mode == Chapter.SHOW_TYPE_ACTIVITY then
            v.Name = Language:GetTxtBuyId(v.Name);
            v.NameE = Language:GetTxtBuyId(v.Name_E);
            v.icons = lua_parse_cfg(v.Show_icon, true)[1]
            v.atkTypes = lua_parse_cfg(v.buildtype, true)[1]
            v.desc_time = lua_parse_cfg(v.desc_time, true)
            v.desc_title = lua_parse_cfg(v.desc_title, true)
            local tmp = { cfg = v, ids = {}, sortid = tonumber(v.ListID), lastid = tonumber(v.Lastid) , icons = v.icons, atkTypes =  v.atkTypes}
            if v.Chapter_ids ~= "0" and v.Chapter_ids ~= "-1" then
                local showTime = tonumber(v.Show_time)
                for _, v in ipairs(lua_parse_cfg(v.Chapter_ids, true)) do
                    table.insert(tmp.ids, v[1])
                    local cpt = Chapter:GetChapter(v[1])
                    if(cpt ~= nil
                        and showTime ~= -1) then
                        cpt.modeTimeid = showTime
                    end
                end
                table.insert(self._modes[mode], tmp)
            end

        end
    end
end

function Chapter:_LoadLevels()
    self._levels = {}
    local cfgerror, id, memoryInfo = false, 0
    local configs = CfgLoader:LoadCfg("MapLevel")
    for _, v in pairs(configs) do
        id = tonumber(v.id)
        local level = {
            id              = id,
            open            = false,
            lvevl           = tonumber(v.Level),
            pass_star       = 0,
            receive         = 0,
            has_star        = 0,
            pass_count      = 0,
            fight_count     = tonumber(v.ChallengeCount),
            remain          = 0,
            open_level      = tonumber(v.Level_open),
            name            = Language:GetTxtBuyId(v.LevelName),
            name_en         = v.EnglishName,
            desc            = Language:GetTxtBuyId(v.LevelDes),
            cost_power      = tonumber(v.CostSpirit),
            cost_items      = v.CostItem,
            sortid          = tonumber(v.ListID),
            rewards         = lua_parse_cfg(v.Rewards,true)[1],
            star_rewards    = v.ThreeStarReward,
            fight_rewards   = lua_parse_cfg(v.ChallengeRewards, true)[1],
            first_rewards   = lua_parse_cfg(v.Rewards_once,true)[1],
            enemyids        = v.Enemey_id,
            GradeID         = v.GradeID,
            LocalWitchId    = v.LocalWitchId,
            chapterid       = tonumber(v.DungeonMapId),
            sweep           = false,
            prev_levelid    = tonumber(v.PreLevelID),
            next_levelid    = tonumber(v.NextLevelID),
            -- 回忆本数据
            memory_level    = 0,
            memory_heroid   = 0,
            name_simple     = Language:GetTxtBuyId(v.SimpleName), --关卡简称 用于提示
            levelbuff       = tonumber(v.levelbuff),
            battlebuff      = tonumber(v.battlebuff),
            char_hero       = v.Chapter_character, --剧情角色id
            equipMax        = tonumber(v.equipMax),
            powerMode       = v.powerMode,
            diffcult        = v.Diffcult,
            bgm_path        = v.LevelBGMFmodPath,
            gf_baseInfo     = v.gf_baseInfo,
            gf_info         = tonumber(v.gf_info),
            timeid          = tonumber(v.Time_id),
            leveldroptype   = tonumber(v.droptype),
            score_drop      = tonumber(v.score_drop_group),
            max_score       = 0,
            bossMadePath    = v.wordboss_show,
            enemy_pos       = lua_parse_cfg(v.enemy_pos,true),
            build_up        = lua_parse_cfg(v.build_UP,true), --枪形伤害加成
            Restraint_level = lua_str_split(v.Restraint_level or "1|50", "&", true),
            Is_Auto         = tonumber(v.Is_Auto),
            needFight       = lua_str_split(v.LevCompat,"&",true),--tonumber(v.LevCompat), --推荐 1 战力/2 等级
            levelAdd        = lua_str_split(v.LevEffect,"&",true), --关卡加成
            levelAddIcon    = lua_str_split(v.EffectIcon,"&"),
            effectDes       = lua_parse_cfg(v.EffectDes,true),
            levelAddDes     = tonumber(v.LevEffectConditionDes), --关卡加成条件描述
            addEffDes       = tonumber(v.LevEffectDes), --加成效果描述
            monsterType     = tonumber(v.monstertype)
        }
        memoryInfo =lua_str_split(v.Memory_level,"&")
        level.memory_level = tonumber(memoryInfo[1])
        level.memory_heroid = tonumber(memoryInfo[2])
        level.remain = level.fight_count
        cfgerror = v.Restraint_level == nil or cfgerror
        if v.Collocation_Times ~= "-1" then
            level.Collocation_Times = lua_str_split(v.Collocation_Times, "&", true)
        end
        self._levels[id] = level
    end
    if cfgerror then
        AppMgr:LogError("!!!!!!!!!!!!!!!!!!!!!!!MapLevel配置错误")
    end
end

function Chapter:_LoadChapters()
    self._chapters      = {}        -- 所有副本数据
    local configs = CfgLoader:LoadCfg("DungeonMap")
    for _, v in pairs(configs) do
        local chapter = {
            id          = tonumber(v.id),
            gid         = tonumber(v.GroupId),
            nindex      = 1,
            name        = Language:GetTxtBuyId(v.MapName),
            name_en     = v.EnglishName,
            desc        = Language:GetTxtBuyId(v.MapDes),
            imgbg       = v.MapImage,
            img         = v.MapImagePrint,
            main_type   = tonumber(v.Level_main_type),
            sub_type    = tonumber(v.Level_type),
            next_id     = tonumber(v.NextDungeonID),
            open_id     = tonumber(v.PreDungeonID),
            prev_ids    = lua_parse_cfg(v.ExDungeonID, true),
            open_level  = tonumber(v.Level_open),
            timeid      = tonumber(v.Time_id),
            count       = tonumber(v.Count),
            itemid      = tonumber(v.Item_id),
            need_item   = (tonumber(v.Item_id) ~= 0),
            top_type    = tonumber(v.Top_type),
            spine       = tonumber(v.Spine or -1),
            levelid     = 0,
            pass_count  = 0,
            has_star    = 0,
            all_star    = 0,
            rewards     = {},
            levelids    = {},
            open        = false,
            pass        = false,
            map_end_des = Language:GetTxtBuyId(v.map_end_des),
            name_simple = Language:GetTxtBuyId(v.SimpleName), --章节简称 用于提示
            fight_count = tonumber(v.Level_count),
            fight_cost  = lua_parse_cfg(v.Level_buy_count, true),
            fight_buy   = 0,
            fight_max   = tonumber(v.Level_count),
            atkTypes    = nil
        }
        -- init levels
        self:_GenLevels(chapter)
        if #chapter.levelids > 0 then
            chapter.levelid = chapter.levelids[1]
        end

        -- init all star
        chapter.all_star = #chapter.levelids * Chapter.LEVEL_STAR_NUM
        -- init rewards
        local dropids = lua_parse_cfg(v.AllStar_reward)
        for i = 1, #dropids do
            local star = math.floor((chapter.all_star / #dropids) * i)
            table.insert(chapter.rewards, {stage = i, state = Chapter.REWARD_STATE_NOT, star = star, dropid = dropids[i][1]})
        end

        self._chapters[tonumber(v.id)] = chapter
    end

    for _, v in pairs(self._chapters) do
        if v.sub_type == Chapter.MODE_COIN then
            Chapter.MODE_COIN_CID = v.id
        elseif v.sub_type == Chapter.MODE_MATERIAL then
            Chapter.MODE_MATERIAL_CID = v.id
        elseif v.sub_type == Chapter.MODE_DRUG then
            Chapter.MODE_DRUG_CID = v.id
        elseif v.sub_type == Chapter.MODE_HEART then
            Chapter.MODE_HEART_CID = v.id
        elseif v.sub_type == Chapter.MODE_TOWER then
            Chapter.MODE_TOWER_CID = v.id
        elseif v.sub_type == Chapter.MODE_MYSTERY then
            Chapter.MODE_MYSTERY_CID = v.id
        elseif v.sub_type == Chapter.MODE_EQUIP then
            -- 符文副本每日刷新大章
            -- Chapter.MODE_EQUIP_CID = v.id
        end
            
    end
end

function Chapter:AddCount()
    local addNum;
    local ids = Operation:GetOpenPrivilegePagId();
    for i, v in ipairs(ids) do
        local cfg = Operation:GetMonthDataById(v);
        for _, chapter in pairs(self._chapters) do
            addNum = 0;
            for j, k in ipairs(cfg.addMapCount) do
                if(addNum == 0)then
                    if(k[1] == chapter.id)then
                        addNum = k[2];
                    end
                end
            end
            if(addNum ~= 0)then
                chapter.count = chapter.count + addNum;
            end
        end
    end
end

function Chapter:RemoveCount()
    local addNum;
    local ids = Operation:GetOpenPrivilegePagId();
    for i, v in ipairs(ids) do
        local cfg = Operation:GetMonthDataById(v);
        for _, chapter in pairs(self._chapters) do
            addNum = 0;
            for j, k in ipairs(cfg.addMapCount) do
                if(addNum == 0)then
                    if(k[1] == chapter.id)then
                        addNum = k[2];
                    end
                end
            end
            if(addNum ~= 0)then
                chapter.count = chapter.count - addNum;
            end
        end
    end
end

function Chapter:_GenLevels(chapter)
    local tmp = {}
    for _, v in pairs(self._levels) do
        if chapter.id == v.chapterid then
            table.insert(tmp, {sortid = v.sortid, id = v.id})
        end
    end
    table.sort(tmp, function(a, b)
            return a.sortid < b.sortid
        end)
    for i, v in ipairs(tmp) do
        table.insert(chapter.levelids, v.id)
    end
    if #chapter.levelids == 0 then
        CS.Logger.LogError("error!!!chapter has 0 level... id = " .. chapter.id)
    end
end

-- 初始化配置
function Chapter:_InitConfig()
    self._plotChapters      = {
        [Chapter.MODE_PLOT_N] = {},    -- 剧情普通
        [Chapter.MODE_PLOT_D] = {},    -- 剧情困难
        [Chapter.MODE_PLOT_S] = {},    -- 剧情深渊
    }
    -- 筛选剧情副本
    local chapterid = Player:GetDefaultChapterId()
    local c = {}
    while true do
        if chapterid == 0 then
            break
        end
        local chapter = self:GetChapter(chapterid)
        if c[chapter.gid] == nil then
            c[chapter.gid] = 1
        end
        table.insert(self._plotChapters[Chapter.MODE_PLOT_N], {gid = chapter.gid, cid = chapter.id})
        chapter.nindex = c[chapter.gid]
        chapterid = chapter.next_id
        -- 困难模式
        local d_chapterid = chapter.open_id
        if d_chapterid ~= 0 then
            -- 深渊模式
            local d_chapter = self:GetChapter(d_chapterid)
            table.insert(self._plotChapters[Chapter.MODE_PLOT_D], {gid = d_chapter.gid, cid = d_chapter.id})
            local s_chapterid = d_chapter.open_id
            d_chapter.nindex = c[chapter.gid]
            if s_chapterid ~= 0 then
                local s_chapter = self:GetChapter(s_chapterid)
                s_chapter.nindex = c[chapter.gid]
                table.insert(self._plotChapters[Chapter.MODE_PLOT_S], {gid = s_chapter.gid, cid = s_chapter.id})
            end
        end
        c[chapter.gid] = c[chapter.gid] + 1
        if c[chapter.gid] > 100 then
            --print("chapter config error! while die...")
            break
        end
    end
end

function Chapter:LevelStarTarget(levelid)
    local desc = {"--", "--", "--"}
    local level = self:GetLevel(levelid)
    local targets = lua_str_split(level.GradeID, "|", true)
    for i = 1, Chapter.LEVEL_STAR_NUM do
        if targets[i] ~= "-1" and targets[i] ~= -1 then
            desc[i] = self:GetDungeonGradeDesc(targets[i])
        end
    end
    return desc
end

function Chapter:_LoadChapterHeros()
    self._cfgHero = {}
    self._chapterHero = {}
    local configs = CfgLoader:LoadCfg("Chapter_character")
    for _,v in pairs(configs) do
        self._cfgHero[tonumber(v.id)] = v
    end
end

function Chapter:GetChapterHeroByID(id)
    id = tonumber(id)
    if  self._chapterHero[id] == nil then
        if self._cfgHero[id] == nil then
            AppMgr:LogError("[Chapter_character]配置表出错。找不到 id = " .. id)
            return nil
        end
        local v = self._cfgHero[id]
        local chero = Hero:GetHero(tonumber(v.heroid))
        local copy_hero = lua_deep_copy(chero)
        copy_hero.star = tonumber(v.star)
        copy_hero.level = tonumber(v.level)
        copy_hero.talentid = -1 --tonumber(v.talentid)
        copy_hero.star = tonumber(v.star)
        copy_hero.plotId = id
        Hero:SkillInit(copy_hero, v.skills)
        Hero:SetHeroSkinId(copy_hero, tonumber(chero.skinid))
        --配置属性
        CAttr:ClearAttrs(copy_hero.attrs)
        local tbl = lua_parse_cfg(v.cattr, true)
        --获得基础属性
        local cfgAttrs = lua_deep_copy(Hero:GetCfgAttrs(copy_hero.id))
        --配置属性覆盖基础属性
        for _, v in pairs(tbl) do
            cfgAttrs[v[1]] = v[2]
        end
        CAttr:AddAttrs(copy_hero.attrs, cfgAttrs)
        --计算属性
        local cfg, all
        for attrtype, value in pairs(copy_hero.attrs) do
            all = copy_hero.attrs[attrtype]
            cfg = CAttr:GetCfg(attrtype)
            if cfg ~= nil then
                if cfg.show_type == CAttr.CALC_TYPE_VALUE then
                    copy_hero.attrs[attrtype] = all
                elseif cfg.show_type == CAttr.CALC_TYPE_PER then
                    copy_hero.attrs[attrtype] = all * 0.001
                end
            end
        end
        --构筑
        copy_hero.buildChap = nil
        local tblBuild = GameTools.GetCsvValueList(v.build)
        if(tblBuild ~= nil) then
            copy_hero.buildChap = {}
            for _, item in pairs(tblBuild) do
                local tbl = GameTools.GetCsvValueList(item,"&")                
                copy_hero.buildChap[tonumber(tbl[1])] = tonumber(tbl[2])
            end
        end
        self._chapterHero[id] = copy_hero
    end
    return  self._chapterHero[id]
end


function Chapter:GetChaptersIdByMainType(mainType)
    if mainType == nil then
        CS.Logger.LogError("levelType is nil");
        return nil;
    end
    mainType = tonumber(mainType);
    local retArr = {};
    for id, v in pairs(self._chapters) do
        if(v.main_type == mainType)then
           table.insert(retArr,id);
        end
    end
    table.sort(retArr,function (a,b)
        return a < b;
    end)
    return retArr;
end

function Chapter:_LoadScoreDrop()
    self._scoreDrop = {}
    local gid = 0
    for _, cfg in pairs(CfgLoader:LoadCfg("DungeonScoreDrop")) do
        gid = tonumber(cfg.score_group)
        if self._scoreDrop[gid] == nil then
            self._scoreDrop[gid] = {}
        end
        table.insert(self._scoreDrop[gid], {type = tonumber(cfg.cond), score = tonumber(cfg.value_start), id = cfg.drop_id, desc1 = tonumber(cfg.desc1), desc2 = tonumber(cfg.desc2)})
        --table.insert(self._scoreDrop[gid], {type = 0, score = tonumber(cfg.score_start), id = cfg.drop_id})
    end

    for _, cfgGroup in pairs( self._scoreDrop) do
        table.sort(cfgGroup, function (a,b)
            return (not self:IsDropHighLevel(a.type, a.score, b.score))
        end)
    end
end


function Chapter:IsDropIncrease(type)
    return type ~= 3
end

function Chapter:IsDropHighLevel(type, a, b)
    if(self:IsDropIncrease(type)) then
        return a >= b
    else
        return a <= b
    end
end

function Chapter:GetDropUpDefault(type)
    if(self:IsDropIncrease(type)) then
        return -1
    else
        return 0
    end
end

function Chapter:GetScoreDrop(gid, score)
    if self._scoreDrop[gid] == nil then
        AppMgr:LogError("[DungeonScoreDrop]配置表储出错，找不到配置组 gid = " .. gid)
        return 0
    end
    local id = 0
    for i, v in ipairs(self._scoreDrop[gid]) do
        if(self:IsDropHighLevel(v.type, score, v.score)) then
        --if score >= v.score then
            id = v.id
        end
    end
    if id == 0 then
        --AppMgr:LogError(string.format("[DungeonScoreDrop]配置表储出错，分数不在组区间内 gid = %s, score = %s", gid, score))
        id = self._scoreDrop[gid][1].id
    end
    return id
end

function Chapter:HasAllScoreDrop(gid)
    if self._scoreDrop[gid] == nil then
        return false;
    end
    return true;
end

function Chapter:GetAllScoreDrop(gid)
    if self._scoreDrop[gid] == nil then
        AppMgr:LogError("[DungeonScoreDrop]配置表储出错，找不到配置组 gid = " .. gid)
    end
    return self._scoreDrop[gid] or {}
end


--依据gid，得分获取等级 1-c 2-b 3-a 4-s
function Chapter:GetScoreLevel(gid,score)
    local levelList = self:GetAllScoreDrop(gid)
    --local level = -1
    local level = 1
    local preNum = 0
    local nextNum = 0

    for i = 1, #levelList do
        if self:IsDropHighLevel(levelList[1].type, score, levelList[i].score) then
            level = i
            if level == 4 then
                preNum = levelList[level].score
                nextNum = self:GetDropUpDefault(levelList[1].type)
                return level,preNum,nextNum
            end
            preNum = levelList[level].score
            nextNum = levelList[level+1].score
        end
    end
    return level,preNum,nextNum
end

function Chapter:_LoadDungeonGrade()
    self._DungeonGrade = {}
    local cfg = CfgLoader:LoadCfg("DungeonGrade")
    for id, v in pairs(cfg) do
        self._DungeonGrade[tonumber(v.id)] = {
            gradeRate   = lua_str_split(v.gradeRate, "&", true),
            defaultGet  = tonumber(v.defaultGet),
            desc = ""
        }
    end 
end

function Chapter:GetDungeonGradeDesc(id)
    if self._DungeonGrade[id] == nil then
        CS.Logger.LogError("GetDungeonGradeDesc [DungeonGrade]配置错误！找不到 = " .. id)
        return ""
    end
    if self._DungeonGrade[id].desc == "" then
        local grade = self._DungeonGrade[id].gradeRate
        local itype = grade[1]
        local desc = LanguageMgr:GetTextByID(2100100 + itype)

        if itype == 1 or itype == 3 or itype == 4 or itype == 5 or itype == 6 or itype == 13 or itype == 15 
            or itype == 19 or itype == 20 then
            if itype == 15 and grade[2] == 0 then
                desc = LanguageMgr:GetTextByID(2100116)
            else
                desc = string.format(desc, grade[2])
            end

        elseif itype == 7 or itype == 11 then
            desc = string.format(desc, grade[2], grade[3])

        elseif itype == 10 then
         -- 魔女
            desc = string.format(desc, Hero:GetHero(grade[2]).config.Name)
         
        elseif itype == 14 then
            local qltystr = {"N", "R", "SR", "SSR"}
            desc = string.format(desc, grade[2], qltystr[tonumber(grade[3])])
        elseif itype == 17 then
            -- 上阵X个X属性的魔女
            desc = string.format(desc, grade[2], LanguageMgr:GetTextByID(881000 + tonumber(grade[3])))

        elseif itype == 18 then
            -- 上阵X个X系别的魔女
            desc = string.format(desc, grade[2], LanguageMgr:GetTextByID(71200000 + tonumber(grade[3])))

        elseif itype == 2 or itype == 6 or itype == 8 or itype == 8 or itype == 9 or itype == 12 then
            -- 2 / 6 / 8 / 9 / 12
            -- do nothing
        else
            -- TODO:
            CS.Logger.LogError("[DungeonGrade]中存在未处理的类型 = " .. itype)
        end        
        self._DungeonGrade[id].desc = desc
    end
    return self._DungeonGrade[id].desc
end

function Chapter:GetDungeonGrade(id)
    if self._DungeonGrade[id] == nil then
        CS.Logger.LogError("GetDungeonGrade [DungeonGrade]配置错误！找不到 = " .. id)
        return nil
    end
    return self._DungeonGrade[id].gradeRate
end

function Chapter:GetDungeonGradeDefaultGet(id)
    if self._DungeonGrade[id] == nil then
        CS.Logger.LogError("GetDungeonGradeDefaultGet [DungeonGrade]配置错误！找不到 = " .. id)
        return nil
    end
    return self._DungeonGrade[id].defaultGet
end
