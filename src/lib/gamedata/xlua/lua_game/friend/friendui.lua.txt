--
-- author: haosun
-- date  : 2019-06-27 14:57:45
-- brief :
--
Friend = Friend or {}

function Friend:OpenFriendLayer(showCall, backCall)
    self._showCall = showCall
    self._backCall = backCall
    self:_OnFriendListReq(Friend.REQ_LIST_TYPE1)
end

function Friend:OpenInvitationLayer()
    self:_OnFriendListReq(Friend.REQ_LIST_TYPE3)
end

function Friend:_OnFriendListReq(reqtype)
    self._openlayer = reqtype
    local tmp = self._reqstate[Friend.REQ_TYPE_FRIEND_LIST]
    if tmp.req and os.time() - tmp.stime < Friend.REQ_INTERVAL then
        self:_OnOpenLayer()
    else
        tmp.req = false
        tmp.stime = 0
        self:GetFriendInfoReq(Friend.REQ_TYPE_FRIEND_LIST)
    end
end

function Friend:_OnOpenLayer()
    local ntype = self._openlayer
    self._openlayer = 0
    if ntype == Friend.REQ_LIST_TYPE1 then
        if(self._FriendLayer == nil)then
            self._FriendLayer = core.require("xlua/lua_UI/HomeScene/friendLayer/FriendLayer.txt"):new()
        end
        self._FriendLayer:show(self._backCall)
        if self._showCall ~= nil then
            self._showCall()
        end
    elseif ntype == Friend.REQ_LIST_TYPE2 then
        
    elseif ntype == Friend.REQ_LIST_TYPE3 then

    end
end
function Friend:CloseFriendLayer()
    if(self._FriendLayer ~= nil)then
        self._FriendLayer = nil;
    end
end

function Friend:OpenApplyLayer()
    if self._reqstate[Friend.REQ_TYPE_APPLY_LIST].req then
        self:_OnOpenApplyLayer()
    else
        self:GetFriendInfoReq(Friend.REQ_TYPE_APPLY_LIST)
    end
end

function Friend:_OnOpenApplyLayer()
    core.require("xlua/lua_UI/HomeScene/friendLayer/FriendApplyLayer.txt"):new():show()
end

function Friend:CtorComFriendUi(obj,callback)
    if(obj == nil)then
        return;
    end
    local cls       = clsbase:new(obj)
    cls.coinCom     = cls:GetButtonComponent("button_coin" )
    cls.coinRecv    = cls:GetButtonComponent("coin_recv")
    cls.coinRecved  = cls:Find("coin_recved")
    cls.talkCom     = cls:GetButtonComponent("button_talk" )
    cls.removeCom   = cls:GetButtonComponent("button_remove" )
    cls.agreeCom    = cls:GetButtonComponent("button_agree" )
    cls.refuseCom   = cls:GetButtonComponent("button_refuse" )
    cls.addCom      = cls:GetButtonComponent("button_add" )

    cls.cplayer     = Player:CtorPlayerIconBorder(cls:Find("prefab_player"))
    cls.nameObj     = cls:Find("text_name")
    cls.nameBgObj   = cls:Find("name_bg")
    cls.nameCom     = cls:GetTextComponent("text_name")
    cls.levelCom    = cls:GetTextComponent("text_level")
    cls.onlineObj   = cls:Find("player_state/text_online")
    cls.onlineCom   = cls:GetTextComponent("player_state/text_online")
    cls.offlineCom  = cls:GetTextComponent("player_state/text_offline")
    cls.offlineObj  = cls:Find("player_state/text_offline")
    cls.headCom     = cls:GetImageComponent("prefab_player/img_icon")

    cls.listbgObj   = cls:Find("image_listBg")
    cls.lineObj     = cls:Find("image_line")
    cls.imgbgObj    = cls:Find("image_bg")
    cls.talkObj     = cls:Find("button_talk")
    cls.addObj      = cls:Find("button_add")
    cls.applyObj    = cls:Find("label_apply")
    cls.applyCom    = cls:GetTextComponent("label_apply")
    cls.refuseObj   = cls:Find("button_refuse")
    cls.agreeObj    = cls:Find("button_agree")
    cls.removeObj   = cls:Find("button_remove")

    return cls
end

--设置ui
function Friend:SetFriendInfoUi(cls, data, showtype)
    cls.nameCom.text = data.name
    cls.levelCom.text = "Lv."..data.level

    cls.onlineObj:SetVisible(data.onlinestate == Friend.STATE_ONLINE)
    cls.offlineObj:SetVisible(data.onlinestate == Friend.STATE_OFFLINE)
    if data.onlinestate == Friend.STATE_ONLINE then
        cls.headCom.material = nil
    else
        cls.headCom.material = AssetLoader:LoadGrayMaterial()
        local dis = CTime:GetServerTime() - data.offlinetime
        local interval, offlinestr = math.modf(dis / 3600), ""
        if interval == 0 then
            interval = math.max(math.floor(dis / 60), 1)
            offlinestr = interval .. LanguageMgr:GetTextByID(1600071)
        elseif interval > 0 and interval < 24 then
            offlinestr = interval .. LanguageMgr:GetTextByID(1600072)
        else
            interval = math.modf(interval / 24)
            offlinestr = interval .. LanguageMgr:GetTextByID(1600073)
        end
        cls.offlineCom.text = offlinestr
    end
    Player:SetPlayerIconBorderObj(cls.cplayer, data.iconid, data.frameid, data.id, false)

    if showtype == Friend.SHOW_FRIENDS then
        local recv = data.recv_state == Friend.COIN_STATE_RECV
        local send = (not recv) and data.send_state == Friend.COIN_STATE_NULL
        local oper = (not recv) and (not send)
        cls.coinCom.gameObject:SetVisible(false)
        cls.coinRecv.gameObject:SetVisible(false)
        cls.coinRecved:SetVisible(false)
    else
        cls.coinCom.gameObject:SetVisible(false)
        cls.coinRecv.gameObject:SetVisible(false)
        cls.coinRecved:SetVisible(false)
    end

    cls.talkObj:SetVisible(showtype == Friend.SHOW_FRIENDS or showtype == Friend.SHOW_RECOMMEND)

    local show = showtype == Friend.SHOW_RECOMMEND and self._applyed[data.id] == nil
    cls.addObj:SetVisible(show)
    show = showtype == Friend.SHOW_RECOMMEND and self._applyed[data.id] ~= nil
    cls.applyObj:SetVisible(show)

    --不记录申请好友 刷新即可再次申请
    self._applyed[data.id] = nil
    if show then
        cls.applyCom:SetTextById(1600048)
    end

    cls.refuseObj:SetVisible(showtype == Friend.SHOW_APLLY)
    cls.agreeObj:SetVisible(showtype == Friend.SHOW_APLLY)
    cls.removeObj:SetVisible(showtype == Friend.SHOW_BLACKLIST)
end