--
-- author: haosun
-- date  : 2021-08-23 10:28:25
-- brief : 
--
GZSDKHelper = GZSDKHelper or {}

local _resons = {
    [1101] = "修改昵称",
    [1118] = "钻石增加体力",
    [1120] = "兑换激活码",
    [1124] = "引导奖励",
    [1126] = "身份证验证奖励",
    [1132] = "领取分享奖励",
    [1136] = "导师选择",
    [1140] = "领取url奖励邮件",
    [1204] = "使用物品",
    [1206] = "出售物品",
    [1303] = "魔女解锁",
    [1305] = "魔女升级",
    [1307] = "魔女升阶",
    [1309] = "魔女升星",
    [1321] = "魔女技能升级",
    [1341] = "魔女获得好感度礼物",
    [1343] = "魔女好感度升华",
    [1345] = "魔女奇遇领取",
    [101603] = "关卡开始",
    [1605] = "关卡结束",
    [1607] = "关卡扫荡",
    [1609] = "关卡三星奖励",
    [1611] = "副本大章星级阶段奖励",
    [1617] = "结算幽暗秘境上周层数奖励",
    [1619] = "增加幽暗秘境奖励次数",
    [1621] = "增加章节次数",
    [1625] = "领取幽暗秘境层数奖励",
    [1804] = "购买深夜buff",
    [1904] = "装备强化",
    [1910] = "出售装备",
    [2107] = "领取邮件附件",
    [2109] = "一键领取附件",
    [2210] = "排行 深夜结算深夜币",
    [2200] = "排行 深夜登记",
    [2230] = " 排行 深夜赛季奖励领取",
    [2231] = "排行 深夜大赛季奖励领取",
    [2309] = " 抽奖",
    [2311] = " 自主购买",
    [2313] = "领取排行商店礼包",
    [2317] = "魔女碎片兑换",
    [2321] = "领取深夜抽奖许愿位奖励",
    [2405] = "领取奖励",
    [2702] = "活动物品领取",
    [2704] = "活动夜莺巡查投骰子",
    [2706] = "活动夜莺巡查领取圈数奖励",
    [2708] = "活动契约水晶转盘",
    [2710] = "活动契约水晶领取次数奖励",
    [2712] = "活动日签到",
    [2714] = "活动预测礼包领取",
    [2716] = "第六封印类 活动天礼包领取",
    [2927] = "接受好友币",
    [2931] = "一键接受好友币",
    [3617] = "充值获取首充礼包",
    [3602] = "充值购买魔女币礼包",
    [3623] = "充值领取手书奖励等级礼包",
    [3625] = "充值手书礼包解锁",
    [3627] = "充值打包礼包天领取",
    [3631] = "充值领取重复礼包",
    [3808] = "子弹构筑升级",
    [3901] = "关卡使用翻牌",
    [4103] = "演奏开始演奏",
    [4105] = "演奏结束演奏",
    [4107] = "演奏领取魔女奖励",
    [4109] = "演奏合成乐谱",
}

function GZSDKHelper:InitGZSDKHelper()
    self._isBiliSDK = GameSdkMgr:IsBiliSdk()

    if not self._isBiliSDK then return end

    self._playerLoginData = {
        oper        = 100,
        func_name       = "playerLoginWithPlayerInfo",
        role_name       = "role_name",
        level           = "level",
        b_account_id    = "b_account_id",
        b_role_id       = "b_role_id",
        b_zone_id       = "b_zone_id",
    }

    self._playerExpData = {
        oper            = 100,
        func_name       = "playerExpWithPlayerInfo",
        change_type     = "level",
        before_level    = "0"
    }

    self._goldFlowData = {
        oper        = 100,
        func_name   = "goldFlowWithPlayerInfo",
        act_type    = "act_type", 
        gold_id     = "gold_id",
        gold_name   = "gold_name",
        gold_type   = "gold_type", 
        gold_num    = "gold_num",
        before_count= "before_count",
        after_count = "after_count",
        reason      = "reason"
    }

    self._itemFlowData = {
        oper        = 100,
        func_name   = "itemFlowWithPlayerInfo",
        act_type    = "act_type", 
        item_id     = "item_id",
        item_name   = "item_name",
        item_type   = "item_type", 
        item_num    = "item_num",
        before_count= "before_count",
        after_count = "after_count",
        reason      = "reason"
    }

    self._guideFlowData = {
        oper        = 100,
        func_name   = "guideFlowWithPlayerInfo",
        guide_id    = "guide_id",
        guide_name  = "guide_name"
    }

    self._stageFlowData = {
        oper        = 100,
        func_name   = "stageFlowWithPlayerInfo",
        stage_id    = "stage_id",
        stage_type  = "单人游戏",
        stage_result= "stage_result",
        stage_time  = "stage_time",
    }
    
    self._missionFlowData = {
        oper            = 100,
        func_name       = "missionFlowWithPlayerInfo",
        mission_id      = "mission_id",
        mission_name    = "mission_name",
        mission_type    = "mission_type",
        mission_status  = "mission_status",
    }

    self._cardFlowData = {
        oper        = 100,
        func_name   = "cardFlowWithPlayerInfo",
        act_type    = "add",
        card_id     = "card_id",
        card_name   = "card_name",
        card_type   = "card_type",
        card_level  = "1",
        card_rank   = "card_rank",
        card_exp    = "0",
        card_rarity = "card_rarity",
        reason      = "reason",
    }
    
    self._cardOpFlowData = {
        oper        = 100,
        func_name   = "cardOpFlowWithPlayerInfo",
        act_type    = "act_type",
        card_id     = "card_id",
        card_name   = "card_name",
        card_type   = "card_type",
        card_level  = "1",
        card_rank   = "card_rank",
        card_exp    = "0",
        card_rarity = "card_rarity",
    }
    
    self._equipOpFlowData = {
        oper        = 100,
        func_name   = "equipOpFlowWithPlayerInfo",
        card_id     = "card_id",
        act_type    = "ct_type",
    }

    self._gachaData = {
        oper        = 100,
        func_name   = "gachaWithPlayerInfo",
        gacha_id    = "gacha_id",
        gacha_type  = "gacha_type",
        gacha_mode  = "gacha_mode", -- 1:单抽 2:十抽
        award       = {},
        cost        = {
            item_id     = 5533,
            item_type   = "4",
            count       = 10
        }
    }
    self._operationalActivityData = {
        oper        = 100,
        func_name   = "operationalActivityWithPlayerInfo",
        activity_id = "activity_id",
        activity_second_id = "activity_second_id",
        activity_name = "activity_name",
        activity_type = "activity_type",
        activity_status = "activity_status",
    }

    self._reportCustomEventData = {
        oper        = 100,
        func_name   = "reportCustomEventWithEventName",
        eventName   = "eventName",
        extention   = {},
        immediately = true,
    }
end

function GZSDKHelper:InitAfterLogin()
    if not self._isBiliSDK then return end

    local srevername = Login:GetLoginServerName()

    local cp_params = { srevername = srevername }

    self._playerLoginData.cp_params = cp_params
    self._playerExpData.cp_params = cp_params
    self._goldFlowData.cp_params = cp_params
    self._itemFlowData.cp_params = cp_params
    self._guideFlowData.cp_params = cp_params
    self._stageFlowData.cp_params = cp_params
    self._missionFlowData.cp_params = cp_params
    self._cardFlowData.cp_params = cp_params
    self._cardOpFlowData.cp_params = cp_params
    self._equipOpFlowData.cp_params = cp_params
    self._gachaData.cp_params = cp_params
    self._operationalActivityData.cp_params = cp_params
end

function GZSDKHelper:doUpdatePlayerInfo()
    if not self._isBiliSDK then return end

    self._playerLoginData["func_name"]  = "doUpdatePlayerInfo"
    self._playerLoginData["role_name"]  = Player:GetName()
    self._playerLoginData["level"]      = tostring(Player:GetLevel())
    self._playerLoginData["b_account_id"]   = tostring(Player:GetId())
    self._playerLoginData["b_role_id"]      = tostring(Player:GetId())
    self._playerLoginData["b_zone_id"]      = tostring(Login:GetLoginServerId())

    GameSdkMgr:OnTdOper(self._playerLoginData)
end

-- 登录成功/注册成功/选择区服/创角
function GZSDKHelper:playerLoginWithPlayerInfo()
    if not self._isBiliSDK then return end

    self:InitAfterLogin()

    self._playerLoginData["func_name"]  = "playerLoginWithPlayerInfo"
    self._playerLoginData["role_name"]  = Player:GetName()
    self._playerLoginData["level"]      = tostring(Player:GetLevel())
    self._playerLoginData["b_account_id"]   = tostring(Player:GetId())
    self._playerLoginData["b_role_id"]      = tostring(Player:GetId())
    self._playerLoginData["b_zone_id"]      = tostring(Login:GetLoginServerId())

    GameSdkMgr:OnTdOper(self._playerLoginData)
end

-- 人物等级发生变更
function GZSDKHelper:playerExpWithPlayerInfo(level)
    if not self._isBiliSDK then return end

    self:doUpdatePlayerInfo()

    self._playerExpData["before_level"] = tostring(level - 1)

    GameSdkMgr:OnTdOper(self._playerExpData)
end

-- 货币发生变化
function GZSDKHelper:goldFlowWithPlayerInfo(act_type, gold_id, gold_name, gold_type, gold_num, before_count, after_count, reason, param)
    if not self._isBiliSDK then return end

    self._goldFlowData["act_type"]      = act_type
    self._goldFlowData["gold_id"]       = tostring(gold_id)
    self._goldFlowData["gold_name"]     = gold_name
    self._goldFlowData["gold_type"]     = gold_type
    self._goldFlowData["gold_num"]      = tostring(gold_num)
    self._goldFlowData["before_count"]  = tostring(before_count)
    self._goldFlowData["after_count"]   = tostring(after_count)
    if param ~= nil then
        local str = ""
        if type(param) == "table" then
            for i, v in pairs(param) do
                str = str .. ":" .. v
            end
            self._goldFlowData["reason"] = reason .. str
        else
            self._goldFlowData["reason"] = reason .. ":" .. param
        end
    else
        self._goldFlowData["reason"] = reason
    end    
    GameSdkMgr:OnTdOper(self._goldFlowData)
end

-- 道具发生变化
function GZSDKHelper:itemFlowWithPlayerInfo(act_type, item_id, item_name, item_type, item_num, before_count, after_count, reason)
    if not self._isBiliSDK then return end

    self._itemFlowData["act_type"]      = act_type
    self._itemFlowData["item_id"]       = tostring(item_id)
    self._itemFlowData["item_name"]     = item_name
    self._itemFlowData["item_type"]     = item_type
    self._itemFlowData["item_num"]      = tostring(item_num)
    self._itemFlowData["before_count"]  = tostring(before_count)
    self._itemFlowData["after_count"]   = tostring(after_count)
    self._itemFlowData["reason"]        = reason

    GameSdkMgr:OnTdOper(self._itemFlowData)
end

-- 每通过一个步骤上报一次
function GZSDKHelper:guideFlowWithPlayerInfo(guide_id, guide_name)
    if not self._isBiliSDK then return end

    self._guideFlowData["guide_id"]     = tostring(guide_id)
    self._guideFlowData["guide_name"]   = guide_name

    GameSdkMgr:OnTdOper(self._guideFlowData)
end

-- 关卡/副本/对局结束时触发
function GZSDKHelper:stageFlowWithPlayerInfo(stage_id, stage_result, stage_time)
    if not self._isBiliSDK then return end

    self._stageFlowData["stage_id"]     = tostring(stage_id)
    self._stageFlowData["stage_result"] = stage_result
    self._stageFlowData["stage_time"]   = tostring(stage_time)
        
    GameSdkMgr:OnTdOper(self._stageFlowData)
end

-- 接受/完成/领取/重做任务时触发
function GZSDKHelper:missionFlowWithPlayerInfo(mission_id, mission_name, mission_type, mission_status)
    if not self._isBiliSDK then return end

    self._missionFlowData["mission_id"]     = tostring(mission_id)
    self._missionFlowData["mission_name"]   = mission_name
    self._missionFlowData["mission_type"]   = Task.TASK_SUB_TYPE_NAME[mission_type] or "未定义任务类型"
    self._missionFlowData["mission_status"] = mission_status

    GameSdkMgr:OnTdOper(self._missionFlowData)
end

-- 卡牌获取/销毁时触发
local card_rarity = {"N", "R", "SR", "SSR", "UR"}
function GZSDKHelper:cardFlowWithPlayerInfo(card_id, reason)
    if not self._isBiliSDK then return end

    local hero = Hero:GetHero(card_id)
    local cfg = Hero:GetCfg(card_id)
    self._cardFlowData["card_id"]     = tostring(card_id)
    self._cardFlowData["card_name"]   = cfg.Name
    self._cardFlowData["card_type"]   = tostring(hero.attri_type)
    self._cardFlowData["card_rank"]   = tostring(hero.star)
    self._cardFlowData["card_rarity"] = card_rarity[hero.qlty]
    self._cardFlowData["reason"]      = tostring(reason)

    GameSdkMgr:OnTdOper(self._cardFlowData)
end

-- 卡牌升级强化等操作时触发
function GZSDKHelper:cardOpFlowWithPlayerInfo(act_type, card_id)
    if not self._isBiliSDK then return end

    local hero = Hero:GetHero(card_id)
    local cfg = Hero:GetCfg(card_id)

    self._cardOpFlowData["act_type"]    = act_type
    self._cardOpFlowData["card_id"]     = tostring(card_id)
    self._cardOpFlowData["card_name"]   = cfg.Name
    self._cardOpFlowData["card_type"]   = tostring(hero.attri_type)
    self._cardOpFlowData["card_level"]  = tostring(hero.level)
    self._cardOpFlowData["card_exp"]    = tostring(hero.exp)
    self._cardOpFlowData["card_rank"]   = tostring(hero.star)
    self._cardOpFlowData["card_rarity"] = card_rarity[hero.qlty]

    GameSdkMgr:OnTdOper(self._cardOpFlowData)
end

-- 英雄穿戴/强化装备时触发
function GZSDKHelper:equipOpFlowWithPlayerInfo(act_type, card_id)
    if not self._isBiliSDK then return end
    
    self._cardOpFlowData["act_type"]    = act_type
    self._cardOpFlowData["card_id"]     = tostring(card_id)

    GameSdkMgr:OnTdOper(self._equipOpFlowData)
end

-- 玩家抽卡时触发
function GZSDKHelper:gachaWithPlayerInfo(gacha_id, gacha_type, gacha_mode, award, costid, costnum)
    if not self._isBiliSDK then return end

    self._gachaData["gacha_id"]     = tostring(gacha_id)
    self._gachaData["gacha_type"]   = tostring(gacha_type)
    self._gachaData["gacha_mode"]   = tostring(gacha_mode)
    for i, v in pairs(self._gachaData["award"]) do
        self._gachaData["award"][i] = nil
    end
    for i, v in pairs(award) do
        table.insert(self._gachaData["award"], {item_id = v.id, item_type = tostring(v.u_type), count = v.count})
    end
    
    self._gachaData["cost"]["item_id"]  = costid
    self._gachaData["cost"]["count"]    = costnum

    GameSdkMgr:OnTdOper(self._gachaData)
end

-- 运营活动类
function GZSDKHelper:operationalActivityWithPlayerInfo(activity_id, activity_second_id, activity_name, activity_type, activity_status)
    if not self._isBiliSDK then return end

    self._operationalActivityData["activity_id"] = tostring(activity_id)
    self._operationalActivityData["activity_second_id"] = tostring(activity_second_id)
    self._operationalActivityData["activity_name"] = activity_name
    self._operationalActivityData["activity_type"] = activity_type
    self._operationalActivityData["activity_status"] = activity_status

    GameSdkMgr:OnTdOper(self._operationalActivityData)
end

-- 
-- brief: 自定义事件
--      eventName 事件名称
--      extention 拓展参数
--      immediately 是否实时上报
-- 
function GZSDKHelper:reportCustomEventWithEventName(eventName, extention, immediately)
    if not self._isBiliSDK then return end

    self._reportCustomEventData["eventName"] = eventName
    for k, v in pairs(self._reportCustomEventData["extention"]) do
        self._reportCustomEventData["extention"][k] = nil
    end
    for k, v in pairs(extention) do
        self._reportCustomEventData["extention"][k] = v
    end
    self._reportCustomEventData["extention"] = extention
    self._reportCustomEventData["immediately"] = immediately or true

    GameSdkMgr:OnTdOper(self._reportCustomEventData)
end
