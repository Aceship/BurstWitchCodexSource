---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by Administrator.
--- DateTime: 2019/9/18 11:57
---
Operation = Operation or {}

function Operation:_LoadCfg()
    self._pointCfg = {};
    self:LoadActiveListCfg();
    self:LoadGrowUpCfg();
    self:LoadMonthCfg();
    self:LoadChargeHandBookCfg()
    self:LoadChargeDailyGiftPackageCfg();
    self:LoadTriggerPackageCfg()
end

function Operation:LoadChargeDailyGiftPackageCfg()
    local cfgs = CfgLoader:LoadCfg("Charge_daliygiftpackage");
    self._mutualExclusionCfg = {};
    local id,data,chargeIds;
    for _, cfg in pairs(cfgs) do
        id = tonumber(cfg.id);
        chargeIds = lua_str_split(cfg.ChargeId_s,"|",true);
        data = {
            id = id,
            days = tonumber(cfg.days),
            chargeId = tonumber(cfg.ChargeId_b),
            chargeIds = chargeIds,
            freeIds = lua_parse_cfg(cfg.FreeIds,true),
        };
        self._mutualExclusionCfg[id] = data;
    end
end

function Operation:GetMutualExclusionCfgById(cfgId)
    cfgId = tonumber(cfgId);
    local retData = self._mutualExclusionCfg[cfgId];
    if(retData == nil)then
        CS.Logger.LogError("retData == nil Pos = ***Operation:GetMutualExclusionCfgById*** cfgId = "..cfgId);
    end
    return retData;
end

function Operation:GetMutualExclusionCfgByPagId(pagId)
    for _, data in pairs(self._mutualExclusionCfg) do
        if(data.chargeId == pagId)then
            return data;
        end
        for i, v in ipairs(data.chargeIds) do
            if(v == pagId)then
                return data;
            end
        end
    end
    return nil;
end

--加载魔女手册
function Operation:LoadChargeHandBookCfg()
    local cfgs = CfgLoader:LoadCfg("Charge_handbook");
    self.bloodCycle = {};
    for _, v in ipairs(cfgs) do
        local data = {};
        data.id = tonumber(v.id);
        data.exp = tonumber(v.need_num);
        data.condition = tonumber(v.condition);
        data.chargeId = tonumber(v.ChargeGiftId);
        if(tonumber(v.free_award) ~= -1)then
            data.freeAward = lua_parse_cfg(v.free_award,true);
        else
            data.freeAward = -1;
        end
        if(tonumber(v.buy_award) ~= -1)then
            data.buyAward = lua_parse_cfg(v.buy_award,true);
        else
            data.buyAward  = -1;
        end
        data.unLock = lua_parse_cfg(v.purchase,true);
        if(tonumber(v.target) ~= -1)then
            data.targets = lua_parse_cfg(v.target,true);
        else
            data.targets = -1;
        end
        self.bloodCycle[data.id] = data;
    end
end

--加载月卡
function Operation:LoadMonthCfg()
    local cfgs = CfgLoader:LoadCfg("Charge_monthCard");
    self.months = {};
    for _, v in ipairs(cfgs) do
        local temp = lua_str_split(v.signAward,"&");
        local arr = {};
        for _, v in ipairs(temp) do
            arr[tonumber(v)] = tonumber(v);
        end
        local mapData = -1;
        if(v.mapCount ~= "-1")then
            mapData = lua_parse_cfg(v.mapCount,true);
        end
        local data = {
            id = tonumber(v.id),
            dayGet = lua_parse_cfg(v.dailyAward,true),
            addLevelCount = lua_parse_cfg(v.levelCount,true),
            addMapCount = mapData,
            signGet = arr,
            allGetData = lua_parse_cfg(v.AllGetData,true),
            maxDay = tonumber(v.Day),
            sustainDay = tonumber(v.LastDays);
        };
        self.months[data.id] = data;
    end
end

function Operation:LoadActiveListCfg()
    self._activeList = {};
    self.leftTogReds = {};
    self.bottomTogReds = {};
    self.isRed = false;
    self._configTemp    = {}
    local cfgLists = CfgLoader:LoadCfg("ActiveList");
    local id = 0
    for _, v in ipairs(cfgLists) do
        id = tonumber(v.id)
        self._activeList[id] = {
            id          = id,
            Name        = Language:GetTxtBuyId(v.Name),
            EnglishName = v.EnglishName,
            Picture     = v.Picture,
            time        = tonumber(v.Time),
            tableName   = v.Table,
            order       = tonumber(v.Order),
            showPaging  = tonumber(v.ShowPaging),
            table       = {}
        }
        self.bottomTogReds[id] = false;
    end
    self:AddCfg(self:LoadActiveChargeCfg());
    self:AddCfg(self:LoadActiveADCfg());
    self:AddCfg(self:LoadActiveCfg());
    for _, v in pairs(self._activeList) do
        table.sort(v.table,function (a,b)--开始排序活动子表
            return tonumber(a.Sort) < tonumber(b.Sort);
        end)
    end
    self:GenActiveListByType()
end

function Operation:AddCfg(cfgs)
    local Interface = -1
    for i, v in ipairs(cfgs) do
        v.id = tonumber(v.id);
        v.UID = tonumber(v.UID);
        if(v.Name ~= nil)then
            v.Name = Language:GetTxtBuyId(v.Name)
        end
        if(v.AdPicture ~= nil)then
            v.adPicture = lua_parse_cfg(v.AdPicture,true);
            v.jump = lua_str_split(v.Jump,"|");
            v.AdPicture = nil;
            v.Jump = nil;
        end
        if(v.Time ~= nil)then
            v.Time = tonumber(v.Time);
        end
        if(v.AD_Image ~= "-1" and v.AD_Image ~= nil)then
            v.ad_Image = lua_str_split(v.AD_Image,"|");
            v.AD_Image = v.ad_Image[1];
        end
        if(v.Spine ~= "-1" and v.Spine ~= nil)then
            v.spine = lua_str_split(v.Spine,"|");
            v.spinePos = lua_parse_cfg(v.SpinePos,true);
            v.spineScale = lua_parse_cfg(v.SpineScale,true);
            v.Spine = nil;
            v.SpinePos = nil;
            v.SpineScale = nil;
        end
        if(v.TimeDesc ~= "-1" and v.TimeDesc ~= nil)then
            v.des = v.TimeDesc;
            v.TimeDesc = nil;
        end
        if(v.Text ~= "-1" and v.Text ~= nil)then
            v.content = v.Text;
            v.Text = nil;
        end
        if v.Interface ~= nil and self._activeList[tonumber(v.Interface)] ~= nil then
            Interface = tonumber(v.Interface)            
            if self._activeList[Interface].table == nil then
                self._activeList[Interface].table = {};
            end
            table.insert(self._activeList[Interface].table, v)
            self.leftTogReds[v.UID] = -1;
        else
            AppMgr:LogError("!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!配表出错了" .. v.Interface)
        end

        if(v.homeLayerIcon ~= nil)then
            self._homeActivityCfg[tonumber(v.UID)] = v;
        end

        self._configTemp[tonumber(v.UID)] = v
    end
end

function Operation:LoadActiveChargeCfg()
    local cfg = CfgLoader:LoadCfg("ActiveCharge")
    for _, v in pairs(cfg) do
        if(v.DisplayConditions == "-1")then
            v.openConditions = Operation.OpenConditionType.Null;
        else
            v.openConditions = lua_parse_cfg(v.DisplayConditions,true);
        end
        if(v.Word == "-1")then
            v.txtWord = nil;
        else
            v.txtWord = lua_str_split(v.Word,"|");
        end
        if(v.UItextPos == "-1")then
            v.uiTxtPos = nil;
        else
            v.uiTxtPos = lua_parse_cfg(v.UItextPos);
        end

        v.Sort = tonumber(v.Sort);
        --主界面活动
        if(v.Homelayericon ~= "-1")then
            v.homeLayerIcon = lua_str_split(v.Homelayericon,"&");
            v.homeLayerIcon[1] = tonumber(v.homeLayerIcon[1]);
        end

        v.mutualExclusionId = tonumber(v.BuyIds);
        local adword = lua_str_split(v.Adword,"&");
        v.id = tonumber(v.id);
        v.charges = Recharge:GetDataIdsByType(v.id);
        v.award = lua_parse_cfg(v.award,true);
        v.curGet = adword[1];
        v.allGet = adword[2];
        if(v.Currency_field ~= "-1")then
            v.currencyIds = lua_str_split(v.Currency_field,"&",true);
        else
            v.currencyIds = {};
        end
        v.showType = tonumber(v.ChargeType);
        v.pointName = v.PointName;
        v.Name = Language:GetTxtBuyId(v.Name);
        v.EnglishName = Language:GetTxtBuyId(v.EnglishName);
    end
    return cfg;
end
function Operation:LoadActiveADCfg()
    local cfg = CfgLoader:LoadCfg("ActiveAD")
    if(cfg == nil)then
        CS.Logger.LogInfo("table is nil !!  tableName = ActiveAD");
    end
    return cfg;
end
function Operation:LoadActiveCfg()
    local retArr = {};
    for _, v in pairs( Activity:GetActivity()) do
        table.insert(retArr,v.info);
    end
    return retArr;
end

--加载成长计划
function Operation:LoadGrowUpCfg()
    local cfgs = CfgLoader:LoadCfg("Charge_growupPlan");
    self._growUpCfgs = {};
    for _, v in ipairs(cfgs) do
        local arr = lua_parse_cfg(v.award,true);
        local data = {
            id = tonumber(v.id),
            group = tonumber(v.group),
            lv = tonumber(v.level),
            award = arr,
        }
        self._growUpCfgs[data.id] = data;
    end
    self._pointCfg["Charge_growupPlan"] = self._growUpCfgs;
end

--根据ID获取魔女手册数据
function Operation:GetBloodCycleDataById(cfgId)
    cfgId = tonumber(cfgId)
    return self.bloodCycle[cfgId];
end

--获取所有魔女手册数据
function Operation:GetWitchBookIdsById(id)
    local retArr = {};
    id = tonumber(id);
    for i, v in pairs(self.bloodCycle) do
        if(v.chargeId == id)then
            table.insert(retArr,v);
        end
    end
    table.sort(retArr,function (a,b)
        return a.id < b.id;
    end);
    for i, v in ipairs(retArr) do
        v.index = i;
    end
    return retArr;
end

--获取月卡数据
function Operation:GetAllMonthData()
    if(self.months == nil)then
        CS.Logger.LogError("月卡配置未加载")
        return nil;
    end
    return self.months;
end

--获取月卡数据
function Operation:GetMonthDataById(id)
    if(self.months[id] == nil)then
        CS.Logger.LogError("月卡配置未加载 id = nil")
        return nil;
    end
    return self.months[id];
end

function Operation:GenActiveListByType()
    self._activeListByType = {}
    for _, v in pairs(Operation.LayerType) do
        self._activeListByType[v] = {}
    end

    for k, j in pairs(self._activeList) do
        if j.id < 9000 then
            table.insert(self._activeListByType[Operation.LayerType.Store], j)
        elseif (j.id > 9000) and (j.id < 10000) then
            table.insert(self._activeListByType[Operation.LayerType.HomeLayer], j)
        elseif j.id > 10000 then
            table.insert(self._activeListByType[Operation.LayerType.Activity], j)
        end
    end
    for _, arr in pairs(self._activeListByType) do
        table.sort(arr, function(a,b)
            return a.order < b.order
        end)
    end
end

--根据指定类型获取活动
function Operation:GetActiveListByType(itype)
    itype = itype or Operation.LayerType.Store
    if self._activeListByType[itype] == nil then
        AppMgr:LogError("！！！！！！！！！！！！未定义的活动类型")
    end
    return self._activeListByType[itype]
end

--获取活动子表集合
function Operation:GetActiveListCfgById(cfgId)
    cfgId = tonumber(cfgId);
    return self._activeList[cfgId];
end

--获取活动子表
function Operation:GetActiveCfgByUID(uid)
    if self._configTemp[tonumber(uid)] == nil then
        AppMgr:LogError("配置表出错.在[ActiveCharge]或[ActiveAD]或[Active]中找不到: " .. uid)
    end
    return self._configTemp[tonumber(uid)]

    -- uid = tonumber(uid);
    -- local retArr;
    -- for k, j in pairs(self._activeList) do
    --     local arr = self:GetActiveListCfgById(j.id).table;
    --     for i, v in pairs(arr) do
    --         if(tonumber(v.UID) == uid)then
    --             retArr = v;
    --             break;
    --         end
    --     end
    --     if(retArr ~= nil)then
    --         break;
    --     end
    -- end
    -- return retArr;
end


function Operation:GetBloodCycleSpecialById(id)
    local cfgs = Operation:GetWitchBookIdsById(id);
    local retArr = {};
    for _, v in pairs(cfgs) do
        if(v.targets ~= -1)then
            table.insert(retArr,v);
        end
    end
    return retArr;
end

function Operation:GetActiveADCfgs()
    local arr = {};    
    for k, j in pairs(self._activeList) do
        if(j.id == Operation.HomeAD)then
            for _, v in ipairs(j.table) do
                if(CTime:IsOpen(tonumber(v.Time)))then
                    table.insert(arr,v);
                end
            end
        end
    end
    return arr;
end
