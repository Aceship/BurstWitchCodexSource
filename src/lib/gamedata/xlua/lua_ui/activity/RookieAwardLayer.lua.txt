---
--- @Author:2144
--- @Create Time:2021-06-01 14:02:00
---
local CBaseLayer = core.require("xlua/lua_UI/UIBaseLayer.txt")
local RookieAwardLayer = class("RookieAwardLayer", CBaseLayer)
--按钮
local BTNS = {
	--@ButtonEnd
}
--构造函数
function RookieAwardLayer:ctor(super)
    CBaseLayer.ctor(self)
    self._prefab = {
        path = "prefab_uiActivity/UI_RookieAwardLayer",
    }
    self._topData = {
        showBtnBack     = true,--返回按钮
        showPlayerInfo  = false,--玩家信息
        showTopInfo     = false,--顶部货币菜单栏
        topInfo        = {},--货币类型
    };
    self._hideOtherLayer = true;
    self._addStack = true;
    self._fading = false;
    self:onEnter();
end


--进入Ui调用一次
function RookieAwardLayer:onEnter()
     self:RegisterHandler();
    self:createPnl();
    self:registerButtonEvent(BTNS);
    self:Init();
end

--按钮事件
function RookieAwardLayer:onButtonClick(itype)
    --@ButtonCallBackEnd
end

--初始化
function RookieAwardLayer:Init()

    self:UpdateData();
    self:InitUI();
end

function RookieAwardLayer:UpdateData()
    self._activityList = {};
    self._playerLoginDays = Player:GetLoginDays()
    self._actInfo = Activity:GetActivityByUId(Activity:GetCurSelectUid());
    self._canAwardList = Activity:GetNewPlayerAwardsList()
    local tempCount = 1;
    for k,v in pairs(self._actInfo.formCfg) do
        self._activityList[tempCount] = v;
        tempCount = tempCount + 1;
    end
end

--初始化UI
function RookieAwardLayer:InitUI()

	self._imgAD = self.layer:GetImageComponent("container/img_AD");
	--@ImageEnd

	--@TextEnd

	self._transSpineBg = self.layer:Get("trans_spine_bg");
	self._transRewards = self.layer:Get("container/trans_rewards");
	--@TransformEnd

	self._rectAD = self.layer:GetRectTransformComponent("container/img_AD");
	--@RectTransformEnd

	--@GameObjectEnd

	--@MToggleEnd

	--@MToggleCallBackEnd

    if(self._actInfo.info.ad_Image ~= nil)then--设置广告字
        local tempV;
        Operation:SetOperationImage(self._imgAD,self._actInfo.info.ad_Image[1],Operation.AD_IMAGE_FILE);
        if(self._actInfo.info.ad_Image[4] == nil)then
            tempV = CS.UnityEngine.Vector2(0.5, 1);
        else
            tempV = CS.UnityEngine.Vector2(tonumber(self._actInfo.info.ad_Image[4]), tonumber(self._actInfo.info.ad_Image[5]));
        end
        self._imgAD.color = CS.UnityEngine.Color(1,1,1,0);
        self._imgAD:DOColor(CS.UnityEngine.Color(1,1,1,1),0.5);
        self._imgAD:ResetSize();
        self._rectAD.anchorMax = tempV;
        self._rectAD.anchorMin = tempV;
        self._rectAD.pivot = tempV;
        self._rectAD.anchoredPosition = CS.UnityEngine.Vector2(tonumber(self._actInfo.info.ad_Image[2]), tonumber(self._actInfo.info.ad_Image[3]));
    end

    if(self._actInfo.info.Picture ~= "-1")then
        self:SetBGImage(self._actInfo.info.Picture);
    end

    if(self._actInfo.info.spine ~= nil)then--设置spine
        self:LoadHeroSpine(self._actInfo.info.spine[1],self._actInfo.info);
    else
        if(self._curModel ~= nil)then
            self.currHeroId = nil;
            u3d_destory_obj(self._curModel);
            self._curModel = nil;
        end
    end


    self.items = {};
    self:SetItemUI();
end

--显示UI
function RookieAwardLayer:show()
    self:showLayer();
end

--退出按钮事件
function RookieAwardLayer:onBackClick()
    self:onPopLayer();
end

--释放
function RookieAwardLayer:onExit()

    Activity:SetCurSelectUid();
    self._activityList = nil;
    self._playerLoginDays = nil;
    self._actInfo = nil;
    self.items = nil;
    if(self._curModel ~= nil)then
        self.currHeroId = nil;
        u3d_destory_obj(self._curModel);
        self._curModel = nil;
    end

    self._transSpineBg = nil;
	self._imgAD = nil;
	self._transRewards = nil;
	self._rectAD = nil;
	--@CloseEnd
    CBaseLayer.onExit(self);
end

---------------------------------------------------------BtnClick------------------------------------------------------------------------------

--@ButtonFunctionEnd

---------------------------------------------------------TogClick------------------------------------------------------------------------------

--@MToggleFunctionEnd

------------------------------------------------------事件-----------------------------------------------------------------------

function RookieAwardLayer:RegisterHandler()
    self:addEventListener(EVENT_TYPE.ACTIVITY_GET_REP,self.__cname,
            function(drops)
                self:UpdateData();
                self:SetItemUI();
                Bag:ShowDrops(drops)
                GEvent:fireEvent(EVENT_NAME.UPDATE_OPER_TOG_STATE);
            end)
    self:addEventListener(EVENT_TYPE.UPDATE_GIFT_BAG,self.__cname,function(isUptateDay)
        if(isUptateDay == false)then
            self:UpdateData();
            self:SetItemUI();
        end
    end);
end

------------------------------------------------------OtherFunction-----------------------------------------------------------------------

function RookieAwardLayer:SetItemUI()
    for k,v in ipairs(self._activityList) do
        if(self.items[k] == nil)then
            self.items[k] = self:NewItem(self.layer:Get(string.format("container/trans_rewards/item%s",k)));
        end
        local itemInfo = GameTools.GetCsvValueList(v.Items,"&")
        Bag:SetComSimpleGoodsUi(self.items[k].item,tonumber(itemInfo[1]),tonumber(itemInfo[2]),tonumber(itemInfo[3]),true)
        local isGet = false;
        self.items[k].id = tonumber(v.id);
        if self._playerLoginDays >= tonumber(v.Count) then
            if self._canAwardList[tonumber(v.id)] ~= nil then
                set_obj_active(self.items[k].effect,true)
                isGet = true;
            else
                set_obj_active(self.items[k].imgGeted,true)
                set_obj_active(self.items[k].effect,false)
            end
        end
        self.items[k].isGet = isGet;
        self.items[k].transform.localScale = CS.UnityEngine.Vector3(0,0,1);
        local dt = self.items[k].transform:DOScale(1, 0.05):SetDelay(0.03 * k);
    end

end

function RookieAwardLayer:NewItem(trans)
    local cls = clsbase:new(trans);
    cls.item = Bag:CtorComSimpleGoodsUi(cls:Find("prefab_item"));
    cls.effect = cls:Find("ui_effect");
    cls.btn = cls:GetButtonComponent("button_click");
    cls.imgGeted = cls:Find("image_geted")
    cls.btn.onClick:AddListener(function ()
        if(cls.isGet)then
            local actId = tonumber(self._actInfo.info.id);
            Activity:GetItemReq(actId,cls.id);
        else
            SingletonMgr:ShowItemTipsLayer(cls.item, cls.item.data[1], cls.item.data[2], false)
        end
    end);
    return cls;
end

function RookieAwardLayer:LoadHeroSpine(heroId,cfg)
    if(self.currHeroId ~= heroId)then
        self.currHeroId = heroId;
        Hero:LoadSpineAsync(self.__cname,self._transSpineBg, tonumber(heroId), Hero.SPINE_UI_TYPE_WITCH,
                function(obj)
                    if obj ~= nil then
                        self._curModel = obj
                        self._skeletonAni = self._curModel:GetComponent("SkeletonAnimation")
                        self._skeletonAni:GetComponent("MeshRenderer").sortingOrder = Activity.SPINE_ORDER;
                        self._curModel.transform.localPosition = CS.UnityEngine.Vector3(cfg.spinePos[1][1],cfg.spinePos[1][2],cfg.spinePos[1][3]);
                        self._curModel.transform.localScale = CS.UnityEngine.Vector3(cfg.spineScale[1][1],cfg.spineScale[1][2],cfg.spineScale[1][3]);
                    end
                end)
    else
        if(self._curModel ~= nil)then
            self._skeletonAni = self._curModel:GetComponent("SkeletonAnimation")
            self._skeletonAni:GetComponent("MeshRenderer").sortingOrder = Activity.SPINE_ORDER;
            self._curModel.transform.localPosition = CS.UnityEngine.Vector3(cfg.spinePos[1][1],cfg.spinePos[1][2],cfg.spinePos[1][3]);
            self._curModel.transform.localScale = CS.UnityEngine.Vector3(cfg.spineScale[1][1],cfg.spineScale[1][2],cfg.spineScale[1][3]);
        end
    end
end

function RookieAwardLayer:SetBGImage(path)
    self._bgData = {
        bgType = "source_icon/operation/BGImage/"..path,
    }
    Groble_UIMgr:SetBgData(self._bgData);
end

return RookieAwardLayer;
