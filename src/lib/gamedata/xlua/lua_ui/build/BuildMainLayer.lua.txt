---
--- @Author:Administrator
--- @Create Time:2020-08-11 16:05:51
---
local CBaseLayer = core.require("xlua/lua_UI/UIBaseLayer.txt")
local BuildMainLayer = class("BuildMainLayer", CBaseLayer)
--按钮
local BTNS = {
	BtnTips = "container/btn_tips",
	--@ButtonEnd
}

--构造函数
function BuildMainLayer:ctor(super)
    CBaseLayer.ctor(self)
    self._prefab = {
        path = "prefab_uiBuild/UI_BuildMainLayer",
    }
    self._topData = {
        showBtnBack     = true,
        showPlayerInfo  = false,
        showTopInfo     = false,--顶部货币菜单栏
        --topInfo        = Player.CURRENCY_MAIL,--货币类型
    };
    --背景设置
    self._bgData = {
        showEffect = true,
        bgType = BackBgPath.BG_DEF,
    }
    self._isSelectItem = false;
    self._addStack = true;
    self._fading = false;
    self._hideOtherLayer = true;
    self:onEnter()
end


local SelectBuildItemHidePos = CS.UnityEngine.Vector3(0,5000,0);

--进入Ui调用一次
function BuildMainLayer:onEnter()
    self:createPnl();
    CS.UnityHelper.NotchfitY(self.layer:Get("container/trans_title_1"))
    CS.UnityHelper.NotchfitY(self.layer:Get("container/trans_title"))
    CS.UnityHelper.NotchfitY(self.layer:Get("container/btn_tips"))
    self:registerButtonEvent(BTNS);
    self:RegisterHandler();
    self:Init();
end

--按钮事件
function BuildMainLayer:onButtonClick(itype)
    if(itype == BTNS.BtnTips)then 
	   self:OnBtnTipsClick();
    else--@ButtonCallBackEnd
	end--RemoveEnd
    --RemoveEnd
end

--退出按钮事件
function BuildMainLayer:onBackClick()
    self:onPopLayer();
    CameraController:UnInitCameraController()
end

--初始化
function BuildMainLayer:Init()
    self._buildItemScale = 1;
    self:InitUI();
end

--初始化UI
function BuildMainLayer:InitUI()

	--@ImageEnd

	--@TextEnd

    self._transDesk = self.layer:Get("container/build_item_bg/img_desk");
    --@TransformEnd

    --@RectTransformEnd

    --@GameObjectEnd

    --@MToggleEnd

    --@MToggleCallBackEnd

    self._selectEffect = {
        transform = self.layer:Get("container/trans_select_effect"),
        effect = nil,
        sorting = nil,
    };
    self._selectEffect.effect = self._selectEffect.transform:GetComponent("ParticleBehaviour");
    self._selectEffect.sorting = self._selectEffect.transform:GetComponent("SortingGroup");
    self._selectEffect.effect:Stop();
    self:addBaseAnimationBehaviour(self.layer:Get("container/trans_title_1"));
    self._txtTitles = {};
    for i = 1, 4 do
        self._txtTitles[i] = self.layer:GetTextComponent("container/trans_title_1/txt_title_"..i);
    end
    self._circleList = self.layer:Get("container/build_item_bg"):GetComponent("CircleList");
    self._circleList:AddListener(function (selectItem,items)
        self:CutItemAction(selectItem,items);
    end);
    self._circleList:AddCutItemOverAction(function ()
        self:CutItemOverAction();
    end);
    self._selectBuildItem = Build:NewBuildItem(self.layer:Get("container/select_build_item"));
    self._selectBuildItem.transform.localPosition = SelectBuildItemHidePos;
    self:InitBuildItems();
    self:SetBuildItemsData();
end


--显示UI
function BuildMainLayer:show()
    self:showLayer();
end

function BuildMainLayer:showLayer()
    -- 相机设置
    CameraController:SetCameraSetting("build");
    if(self._isSelectItem)then
        self._isSelectItem = false;
        self:SetBuildItemsData();
        CameraController:SetCamTransformData(CamPosType.Build);
        self:playAni("SelectBuildItemOutAnim");
    else
        CameraController:CameraBuildPlay();
        Build:PlayEnterAnim();
    end
    CBaseLayer.showLayer(self);
end

--function BuildMainLayer:onPerSecondUpdate()
--end
---------------------------------------------------------BtnClick------------------------------------------------------------------------------

function BuildMainLayer:OnBuildBtnClick(cls)
    if(cls.isLock)then
        return;
    end
    CameraController:SaveCamTransformData(CamPosType.Build);
    Build:SetCurSelectAtkType(cls.atkType);
    CameraController:UnInitCameraController()
    core.require("xlua/lua_UI/Build/BuildDotLayer.txt"):new():show();
end

function BuildMainLayer:OnBtnTipsClick()
    Groble_UIMgr:ShowRuleTipsLayer(3001);
end
--@ButtonFunctionEnd

---------------------------------------------------------TogClick------------------------------------------------------------------------------

--@MToggleFunctionEnd

------------------------------------------------------事件-----------------------------------------------------------------------

function BuildMainLayer:RegisterHandler()
    self:addEventListener(EVENT_TYPE.UI_ACTION,EVENT_NAME.BUILD_MADE_LOAD_OVER,function()
        self:EnterAnimPlayerOver();
    end);
end

--释放
function BuildMainLayer:onExit()
    Build:CloseScene();


    self._transDesk = nil;
    self._selectEffect = nil;
    self._selectBuildItem = nil;
    self._txtTitles = nil;
    self._circleList = nil;
    --@CloseEnd
    CBaseLayer.onExit(self);
end

------------------------------------------------------OtherFunction-----------------------------------------------------------------------

function BuildMainLayer:EnterAnimPlayerOver()
    self:SetTxtTitle();
    self._circleList.IsAutoMove = true
    self:playAni("BuildMainLayerAnim");
end

local V3zero    = CS.UnityEngine.Vector3.zero
local V3one    = CS.UnityEngine.Vector3.one
function BuildMainLayer:InitBuildItems()
    self._buildItems = {};
    local items = self._circleList:InitData(#Hero.BuildAtk);
    for i = 1, #Hero.BuildAtk do
        self._buildItems[Hero.BuildAtk[i]] = Build:NewBuildItem(items[i - 1],function (cls)
            if(self._isSelectItem)then
                return;
            end
            if(not cls.isLock)then
                self._selectEffect.transform:SetParent(cls.transform);
                self._selectEffect.transform.localPosition = V3zero;
                self._selectEffect.transform.localScale = V3one;
                self._selectEffect.effect:Stop();
                self._selectEffect.effect:Play();
                self._selectEffect.sorting.sortingOrder = cls.sort.sortingOrder;
            end
            self._circleList:CloseLastItemIndex();
            GEvent:fireEventByEvt(EVENT_TYPE.SCRIPT_ACTION, EVENT_NAME.FROST_VIEW,true);
            self._circleList:SetLastItemIndex(cls.atkType - 1);
        end);
        self._buildItems[Hero.BuildAtk[i]].obj.name = tostring(i)
    end
    self._circleList:Init();
end

function BuildMainLayer:SetBuildItemsData()
    for k, cls in pairs(self._buildItems) do
        Build:SetBuildItemData(cls,k);
        if(cls.isLock)then
            cls.imgIcon:SetImageColor(100/255,100/255,100/255,1);
        else
            cls.imgIcon:SetImageColor(1,1,1,1);
        end
    end
end

function BuildMainLayer:onFixedUpdate(dt)
    if(self._buildItems ~= nil)then
        for _, cls in pairs(self._buildItems) do
            self._buildItemScale = cls.transform:GetScaleX(true);
            cls.imgCanvasGroup.alpha = self._buildItemScale * 1.2;
            cls.effectColorScript.Factor = self._buildItemScale;
            cls.txtCanvasGroup.alpha = (self._buildItemScale - self._circleList.MinScale) * 2.5 - self._circleList.MinScale;
        end
    end
end

function BuildMainLayer:CutItemAction(selectItem,items)
    for _, cls in pairs(self._buildItems) do
        for i = 2, #Hero.BuildAtk - 1 do
            if(items[i] == cls.transform)then
                cls.sort.sortingOrder = 2020 + i;
                cls.canvas.sortingOrder = 2020 + i;
                break;
            end
        end
        if(cls.transform == selectItem)then
            cls.imgCanvasGroupValue = 1;
            cls.txtCanvasGroupValue = 1;
            self._selectItem = cls;
        else
            cls.imgCanvasGroupValue = 1;
            cls.txtCanvasGroupValue = 1;
        end
    end
    self._transDesk:SetSiblingIndex(3);
end

function BuildMainLayer:CutItemOverAction()
    if(self._selectItem.isLock)then
        Groble_UIMgr:ShowTipsLayer(LanguageMgr:GetTextByID(702102));
        self._circleList:CloseLastItemIndex();
        GEvent:fireEventByEvt(EVENT_TYPE.SCRIPT_ACTION, EVENT_NAME.FROST_VIEW,false);
        return;
    end
    self._isSelectItem = true;
    self._selectItem.objItem:SetVisible(false);
    self._selectBuildItem.atkType = self._selectItem.atkType;
    Build:SetBuildItemData(self._selectBuildItem,self._selectBuildItem.atkType);
    self._selectBuildItem.transform.position = self._selectItem.transform.position;
    self:playAni("SelectBuildItemInAnim");
end

function BuildMainLayer:SetTxtTitle()
    local index = 1;
    for i, txt in ipairs(self._txtTitles) do
        index = math.random(1,3);
        txt:SetTextById(tonumber("703087"..i..index));
    end
end

function BuildMainLayer:KeyFrameCall(intkey)
    if(intkey == 1)then
        self._selectItemAnchorPos = self._selectBuildItem.rect.anchoredPosition;
        self._selectBuildItem.rect:DOAnchorPos(CS.UnityEngine.Vector2(-458,-113),0.25):SetDelay(0.2);
        self._selectEffect.transform:SetParent(self._selectBuildItem.transform);
        self._selectEffect.transform.localPosition = V3zero;
        self._selectEffect.transform.localScale = V3one;
    elseif(intkey == 2)then
        self:OnBuildBtnClick(self._selectItem);
        GEvent:fireEventByEvt(EVENT_TYPE.SCRIPT_ACTION, EVENT_NAME.FROST_VIEW,false);
    elseif(intkey == -1)then
        GEvent:fireEventByEvt(EVENT_TYPE.SCRIPT_ACTION, EVENT_NAME.FROST_VIEW,true);
        self._selectBuildItem.rect:DOAnchorPos(self._selectItemAnchorPos,0.25);
    elseif(intkey == -99)then
        self._selectItem.objItem:SetVisible(true);
        self._selectBuildItem.rect:DOKill();
        self._selectBuildItem.transform.localPosition = SelectBuildItemHidePos;
        self._circleList:CloseLastItemIndex();
        GEvent:fireEventByEvt(EVENT_TYPE.SCRIPT_ACTION, EVENT_NAME.FROST_VIEW,false);
    elseif(intkey == 50)then
        self:SetTxtTitle();
    elseif intkey == 99 then
        if Guide:IsGuiding() then
            self._circleList.IsAutoMove = false
            Guide:ContinueGuideEvent(self.__cname)
        else
            self._circleList.IsAutoMove = true
        end
    end
end

return BuildMainLayer;
