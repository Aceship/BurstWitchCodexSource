--
-- author: haosun
-- date  : 2018-12-04 16:59:20
-- brief : 
--
local CBaseLayer = core.require("xlua/lua_UI/UIBaseLayer.txt")
local CGetTipsLayer = class("CGetTipsLayer", CBaseLayer)

local s_instance = nil
function CGetTipsLayer.GetInstance()
    if s_instance == nil then
        s_instance = CGetTipsLayer:new()
    end
    return s_instance
end

function CGetTipsLayer.DestoryInstance()
    if s_instance ~= nil then
        s_instance:onExit()
        s_instance = nil
    end
end

function CGetTipsLayer:ctor(super)
    CBaseLayer.ctor(self)
    self._prefab = {
        path = "prefab_comframeWork/UI_GetTipsLayer",
    }
    self._dropItems = {}
    self._items = {}
    self._index = 1
    self._showing = false
	self._fading = false;
    self._closeTimer = -1;
    self:onEnter()
end

function CGetTipsLayer:onEnter()
    self:createPnl()
    local scale = 2;
    if(CS.UnityEngine.Screen.height / 1080 > scale)then
        scale = CS.UnityEngine.Screen.height / 1080;
    end
    self.layer:Get("container/image_bg"):SetScale(scale,scale,scale);
    self._item      = self.layer:Get("item_hide").gameObject
    self._scroll    = self.layer:GetScrollRectComponent("container/scrollview/viewport/content")
    self._transTitle= self.layer:Get("container/trans_title")
    self._txtSettleTitle= self.layer:GetTextComponent("container/txt_settle_title")
    self:hideLayer()
end

function CGetTipsLayer:onExit()
    if self._timerId ~= nil then
        Timer:RemoveTimerCall(self._timerId)
    end
    self._dropItems = nil
    self._item      = nil
    self._scroll    = nil
    self._transTitle= nil
    self._txtSettleTitle= nil
    CBaseLayer.onExit(self)
end

function CGetTipsLayer:onBackClick()
    self:hideLayer()
    self._showing = false
    self:Reshow()
    if self._callback ~= nil then
        self._callback()
        self._callback = nil
    end
    if self._fmodinst ~= nil then
        fmod:StopByInstnace(self._fmodinst)
    end
    self._fmodinst = nil
    LayerMgr:LayerCheck()
end

function CGetTipsLayer:onUpdate(dt)
    if(self._closeTimer == nil or self._closeTimer <= 0)then
        return;
    end
    self._closeTimer = self._closeTimer - dt;
    if(self._closeTimer <= 0)then
        self._closeTimer = 0;
        self:onBackClick();
    end
end

function CGetTipsLayer:show(callback)
    if  self._showing then
        return
    end
    local  index =  self._index
    if self._items[index] == nil then
        return
    end
    self._callback = callback
    self._showing = true
    local maxnum, disx = 6, 166
    local scrollview = self.layer:Get("container/scrollview")
    local posx = 0
    self._dropItems, posx = self:SetScrollGoods(self._dropItems, scrollview, self._items[index], maxnum, 1000, disx, 0.6, nil, true)
    local num = math.min(#self._items[index], maxnum)
    local item
    for i = 1, num do
        item = scrollview:Get("viewport/content/prefab_item" .. i)
        item:SetPositionX(1600)
        item:DOLocalMoveX(posx + (i - 1) * disx, 0.5):SetDelay((i-1)*0.05)
    end
    self:showLayer()
    self._fmodinst = fmod:playEvent("event:/GameEffect/UIEffect/UI_GetTipsLayer-OnEnable")
    self:playAni("GetTipsLayerAni")

end

function CGetTipsLayer:onLayerFadeInEndCall()
    if Chapter:IsAutoFight() then
        self._fading = true
        self._timerId = Timer:AddTimerCall(0.75, function()
				self._fading = false;
                self._timerId = nil
                self:onBackClick()
                Chapter:AutoFightContinue()
            end)
    end
end

function CGetTipsLayer:SetScrollGoods(cls,scrollview, items, max_num, width, disx, scale, posx, isuid, showMay)
    local num = #items
    if posx == nil then
        posx = width/2 - (num - 1) * (disx / 2)
        if num > max_num then
            posx = width/2 - (max_num - 1) * (disx / 2)
        end
    end
    local content = scrollview.transform:Find("viewport/content")
    if num > max_num then
        content:SetSizeX(disx * num)
    end
    scrollview:GetComponent("ScrollRect").horizontal = num > max_num
    scrollview:GetComponent("ScrollRect").horizontalNormalizedPosition = 0
    cls = self:SetShowGoods(cls, content, items, posx, disx, scale, isuid, showMay)
    return cls, posx
end

function CGetTipsLayer:SetShowGoods(cls, content, items, posx, disx, scale, isuid, showMay)
    local count = math.max(content.childCount, #items)
    if cls == nil then
        cls = {}
    end
    if cls.items == nil then
        cls.items = {}
    end
    for i = 1, count do
        local prefab_item = content:Get("prefab_item" .. i)
        if prefab_item == nil then
            local simple = true
            if items[i]~= nil then
                simple =  items[i][1] ~= Bag.TYPE_EQUIP
            end
            prefab_item = content:AddChild(self._item)
            prefab_item.name = "prefab_item"..i
            prefab_item:GetComponent("RectTransform").anchorMin = CS.UnityEngine.Vector2(0, 0.5)
            prefab_item:GetComponent("RectTransform").anchorMax = CS.UnityEngine.Vector2(0, 0.5)
            prefab_item:SetScale(scale, scale, scale)
            cls.items[i] = Bag:CtorGoodsUi(prefab_item,nil,true);
        end
        cls.items[i]:Visible(items[i] ~= nil)
        cls.items[i]:SetPosition(posx + (i - 1) * disx, 0, 0)
        if items[i] ~= nil then
            Bag:SetGoodsUiEx(cls.items[i], items[i][1], items[i][2], items[i][3], isuid, items[i][4], showMay)
        end
    end
    return cls
end

function CGetTipsLayer:AddItems(items)
    table.insert(self._items, items)
end

function CGetTipsLayer:Reshow()
    table.remove(self._items, self._index)
    if self._items[self._index] ~= nil then
        self:show()
    end
end

function CGetTipsLayer:AddCloseTimer(timer)
    self._closeTimer = timer;
end

function CGetTipsLayer:SetTitleState(showSettle)
    showSettle = showSettle or false;
    self._txtSettleTitle:SetEnabled(showSettle);
    self._transTitle:SetVisible(not showSettle);
end

return CGetTipsLayer

