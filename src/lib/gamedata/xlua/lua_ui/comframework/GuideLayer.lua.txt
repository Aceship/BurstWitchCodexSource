--
-- author: haosun
-- date  : 2019-03-07 15:49:44
-- brief : 
--

local CBaseLayer = core.require("xlua/lua_UI/UIBaseLayer.txt")
local GuideLayer = class("GuideLayer", CBaseLayer)

local BUTTON_TYPES = {
    onnext      = "ui_dialog/button_next",
    ongo        = "ui_finger/button_go",
    intro       = "ui_intro/button_intro",
}

function GuideLayer:ctor(super)
    CBaseLayer.ctor(self)
    self._prefab = {
        path = "prefab_comframeWork/UI_GuideLayer",
    }
    self._dt        = 0
    self._dtTyping  = 0
    self._typing    = false
    self._clicking  = false
    self._hiding    = false
    self._done      = false
    self:onEnter()
end

function GuideLayer:initObj()
    self._uiFinger      = self.layer:Get("ui_finger")
    self._aniFinger     = self.layer:GetAnimationComponent("ui_finger")
    self._fingerObj     = self._uiFinger:Get("finger")
    self._fingerRectTf  = self._fingerObj:GetComponent("RectTransform")
    self._dialogObj     = self._uiFinger:Get("dialog")
    self._uiFingerTxt   = self._dialogObj:GetTextComponent("text_desc")
    self._uiDialog      = self.layer:Get("ui_dialog")
    self._uiDialogTxt   = self._uiDialog:GetTextComponent("container/text_desc")
    self._uiIntro       = self.layer:Get("ui_intro").gameObject
    self._uiIntroImg    = self._uiIntro:GetImageComponent("image_intro")
    self._uiIntroTxt    = self._uiIntro:Get("text_next_tips")
    self._ui_move   = self.layer:Get("ui_move")

    self._maskscript    = self._uiFinger:GetComponent("GuideLightMask")
    self._moveMask      = self._ui_move:GetComponent("GuideLightMask")
    self._compCanvas    = self.layer:GetComponent("Canvas")
    self._orderInLayer  = 3300
end

function GuideLayer:onEnter()
    self:createPnl()
    self:initObj()
    self:registerButtonEvent(BUTTON_TYPES)
    self:addEventListener(EVENT_TYPE.UI_ACTION, EVENT_NAME.ON_NEXT_GUIDE, 
        function()
            self._typing = false
            self:onDelayCheck(false)
        end)
    self:addEventListener(EVENT_TYPE.UI_ACTION, EVENT_NAME.RECOVER_GUIDE, 
        function()
            if not self._done then
                self._doing = true
            end
        end)
    self:addEventListener(EVENT_TYPE.UI_ACTION, EVENT_NAME.MOVE_GUIDE_END,
        function()
            self:moveComplete()
        end)
    self:hideGuideUi()
end

function GuideLayer:onExit()
    self._uiFinger      = nil
    self._fingerObj     = nil
    self._dialogObj     = nil
    self._uiFingerTxt   = nil
    self._uiDialog      = nil
    self._uiDialogTxt   = nil
    self._uiIntro       = nil
    self._uiIntroImg    = nil
    self._uiIntroTxt    = nil
    self._aniFinger     = nil
    self._eventclick    = nil
    self._ui_move       = nil
    self._maskscript    = nil
    self._moveMask      = nil
    self._compCanvas    = nil

    CBaseLayer.onExit(self)
end

function GuideLayer:onButtonClick(itype)
    if self._clicking then return end
    if self._fading then return end
    if self._typing then return end

    self._clicking = true
    if itype == BUTTON_TYPES.onnext then
        self._typing = false
        Guide:OnNextStep()
    elseif itype == BUTTON_TYPES.ongo then
        Guide:ClearFightBackTo()
        if self._ui ~= nil then
            if self._onlyclick then
                self._typing = false
                Guide:OnNextStep()
                return
            end
            self._eventclick = self._ui:GetComponent("EventTriggerListener")
            if self._eventclick ~= nil then
                if self._eventclick.onClick ~= nil then
                    self._eventclick.onClick()
                else
                    if self._eventclick.onDown ~= nil then
                        self._eventclick.onDown()
                    end
                    if self._eventclick.onUp ~= nil then
                        self._eventclick.onUp()
                    end
                end
                self._eventclick = nil
            else
                self._eventclick = self._ui:GetComponent("Button")
                if self._eventclick ~= nil then
                    self._eventclick.onClick:Invoke()
                else
                    self._eventclick = self._ui:GetMToggleComponent()
                    if self._eventclick ~= nil then
                        self._eventclick.isOn = true
                    end
                end
                self._eventclick = nil
            end
            Guide:IsCommitGuide(false)
            self._typing = false
            Guide:OnNextStep()
        else
            -- CS.Logger.LogInfo("~~~~~~~~~~~~~~~~~~~~~~wating~~~")
            Guide:OnPrevStep()
            self:doGuide()
        end
    elseif itype == BUTTON_TYPES.intro then
        Guide:OnNextStep()
    end
end

function GuideLayer:onUpdate(dt)
    if self._doing then
        self._dt = self._dt + dt
        if self._dt > self._delay then
            self._doing = false
            self._dt = 0
            self:doGuide()
        end
    end
    if self._typing then
        self._dtTyping = self._dtTyping + dt
        if self._dtTyping > 0.03 then
            self._dtTyping = self._dtTyping - 0.03
            self:doTyping()
        end
    end
end

function GuideLayer:show()
    self._fading = false
    self:hideGuideUi()
    self:onDelayCheck(true)
    self:showLayer()
end

function GuideLayer:doGuide()
    self:hideGuideUi()
    local cfg = Guide:GetGuide()
    if cfg.jumpHid ~= 0 then
        -- 魔女升级引导保护机制
        local heroId = cfg.jumpHid
        if heroId == nil then
            heroId = 1001
        else
            local hero = Hero:GetHero(cfg.jumpHid)
            if not hero.owner then
                heroId = 1001
            end
        end
        Guide:SetGuideJumpHid(heroId)
        Guide:CheckHeroLevelUp(heroId)
    end
    self:checkOrderInLayer(cfg.orderInLayer)
    self._done = true
    self._typing = false
    self._hiding = false
    if cfg.operType == Guide.TYPE_DIALOG then
        self:showDialog(cfg)
        self._clicking = false
    elseif cfg.operType == Guide.TYPE_CLICK then
        self:showFingerAni(cfg)
        self._clicking = false
    elseif cfg.operType == Guide.TYPE_INTRO then
        self._clicking = true
        self:showIntro(cfg)
    elseif cfg.operType == Guide.TYPE_MOVE then
        self:showMove(cfg)
    else
        Guide:ShowGuideLog()
        CS.Logger.LogError("!!!!!!!!!!!!!!!!!!!!!!!!!!guide operType error. {0}", cfg.operType)
    end
end

function GuideLayer:hideGuideUi()
    if self._hiding then
        return
    end
    self._hiding = true
    self._done = false
    self._uiDialog:SetVisible(false)
    self._uiFinger:SetVisible(false)
    self._uiIntro:SetVisible(false)
    self._ui_move:SetVisible(false)
end

function GuideLayer:showDialog(cfg)
    self._uiDialog:SetVisible(true)
    self._uiDialogTxt.text = ""
    self._uitext = self._uiDialogTxt
    self._showstr = cfg.talk
    self._showidx = 0
    self._uiDialog:AnimationPlay("GuideDialogAni2")
    self.layer:DelayCall(0.3, function() self:UI_MainBoxFadeInEnd() end)
end

function GuideLayer:showFingerAni(cfg)
    -- calc finger pos
    self._uiFinger:SetVisible(true)
    self._fingerObj:SetVisible(false)
    self._dialogObj:SetVisible(false)
    self._ui = CS.UnityEngine.GameObject.Find(cfg.uiname)
    if self._ui == nil then
        CS.Logger.LogError("~~~~~~ do Guide Click Ui Waiting ~~~~~~~~~~ {0}", cfg.uiname)
        Guide:ForceClearGuide()
        return
    end

    local offsetx, offsety = 0, 0
    local pivot = self._ui:GetComponent("RectTransform").pivot
    local sizex = self._ui:GetSizeDeltaX()
    if pivot.x == 0 then
        offsetx = sizex/2
    end
    if pivot.x == 1 then
        offsetx = -sizex/2
    end
    if cfg.offsety ~= 0 then
        offsety = fixed_screen_height(cfg.offsety)
    end
    self._fingerObj.position = self._ui.transform.position
    self._fingerRectTf.anchoredPosition = CS.UnityEngine.Vector2(self._fingerRectTf.anchoredPosition.x + cfg.offsetx,
        self._fingerRectTf.anchoredPosition.y + offsety);

    self._localPosY = self._fingerObj:GetPositionY(true)
    self._localPosX = 0
    if self._fingerObj:GetPositionX(true) < -430 then
        self._localPosX = 100
    end
    if self._localPosY > 480 then
        self._dialogObj:SetPosition(self._localPosX, self._localPosY - 360, 0, true)
    else
        self._dialogObj:SetPosition(self._localPosX, self._localPosY + 200, 0, true)
    end
    self._onlyclick = cfg.click == Guide.CLICK_EMPTY
    
    local targetUi = self._ui
    local width_ = cfg.focusWidth
    local height_ = cfg.focusHeight
    if(cfg.inSceneId ~= 1
        and cfg.isGuidanceRangeDisplay) then

    else 
        width_ = 20000
        height_ = 20000
    end

    self._maskscript:onCircle(self._fingerRectTf)
    self._maskscript:SetFocus(targetUi, width_, height_, cfg.focusOffsetX, cfg.focusOffsetY)
    self._aniFinger:Play("GuideFingerAni")
    self._showTyping = cfg.talk ~= "-1"
    if self._showTyping then
        self._uitext = self._uiFingerTxt
        self._uitext.text = ""
        self._showstr = cfg.talk
        self._showidx = 0
        self._fading = true
        self._dialogObj:SetVisible(true)
        self._dialogObj:SetScale(0, 0, 0)
        self._dialogObj.transform:DOScale(1, 0.2):OnComplete(
            function()
                self:UI_MainBoxFadeInEnd()
            end)
    else
        self._fingerObj:SetVisible(true)
    end
end

function GuideLayer:showIntro(cfg)
    self._uiIntroImg:LoadSprite(cfg.imgIntro)
    self._uiIntroTxt:SetVisible(false)
    self._uiIntro:SetVisible(true)
    self._uiIntroImg:SetImageColor(1, 1, 1, 0)
    self._uiIntroImg:DOColor(CS.UnityEngine.Color (1, 1, 1, 1), 1):OnComplete(
        function()
            self._clicking = false
            self._uiIntroTxt:SetVisible(true)
        end)
end

function GuideLayer:showMove(cfg)
    local uiTarget = CS.UnityEngine.GameObject.Find(cfg.uiname)
    if uiTarget == nil then return end
    
    self._ui_move:SetVisible(true)

    local offsetx, offsety = 0, 0
    local pivot = uiTarget:GetComponent("RectTransform").pivot
    local size = uiTarget:GetComponent("RectTransform").sizeDelta
    
    if pivot.x == 0 then offsetx = size.x/2 end
    if pivot.x == 1 then offsetx = -size.x/2 end

    local rect = self.layer:GetRectTransformComponent("ui_move/rect")
    self.layer:Get("ui_move/rect").position = uiTarget.transform.position
    self.layer:Get("ui_move/hand").position = uiTarget.transform.position
    if cfg.offsety ~= 0 then
        offsety = fixed_screen_height(cfg.offsety)
    end
    Guide:SetGuideExchangeHero()
    rect.anchoredPosition = CS.UnityEngine.Vector2(rect.anchoredPosition.x + cfg.offsetx, rect.anchoredPosition.y + offsety)
    self._moveMask:onCircle(rect)
    self.layer:GetComponent("TransparentGraphic").raycastTarget = false
end

function GuideLayer:moveComplete()
    self.layer:GetComponent("TransparentGraphic").raycastTarget = true
    Guide:OnNextStep()
end

function GuideLayer:onDelayCheck(pause)
    Guide:ShowGuideLog()
    local cfg = Guide:GetGuide()
    if cfg ~= nil then
        self._dt    = 0
        self._doing = false
        self._delay = 0.2
        self:checkOrderInLayer(cfg.orderInLayer)
        Guide:OnWaitNetMsg(cfg.startType)
        Guide:CheckReward()
        if pause then return end
        if Guide:IsNormalGuide() then
            if cfg.startType == 4 then
                self:doGuide()
            else
                self:hideGuideUi()
                if cfg.startType == 5 then
                    self.layer:DelayCall(cfg.condition, 
                        function()
                            if not self._done then self._doing = true end
                        end)
                end
            end
        else
            if cfg.startType == 4 then
                self:doGuide()
            elseif cfg.startType == 5 then
                self:hideGuideUi()
                self.layer:DelayCall(cfg.condition, 
                    function()
                        self:doGuide()
                    end)
            else
                if Guide:GetAutoGuide() then
                    Guide:SetAutoGuide(false)
                    self:doGuide()
                else
                    self:hideGuideUi()
                end
            end
        end
    else
        Guide:EndGuide()
    end
end

function GuideLayer:UI_MainBoxFadeInEnd()
    self._typing = true
    self._fading = false
    if self._showTyping then
        self._fingerObj:SetVisible(false)
    end
end

function GuideLayer:doTyping()
    if self._showidx <  Groble_SceneMgr:GetStrLen(self._showstr) then
        self._uitext.text = self._uitext.text .. Groble_SceneMgr:SubTalkStr(self._showstr, self._showidx)
        self._showidx = self._showidx +1
    else
        self._showidx   = 0
        self._delay     = 0
        self._typing    = false
        self._fingerObj:SetVisible(true)
    end
end

function GuideLayer:checkOrderInLayer(orderInLayer)
    if self._orderInLayer ~= orderInLayer then
        self._orderInLayer = orderInLayer 
        self._compCanvas.sortingOrder = self._orderInLayer
    end
end

return GuideLayer

