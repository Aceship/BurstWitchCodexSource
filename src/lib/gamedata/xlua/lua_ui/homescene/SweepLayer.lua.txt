--
-- author: haosun
-- date  : 2018-12-11 20:30:14
-- brief : 
--
local CBaseLayer = core.require("xlua/lua_UI/UIBaseLayer.txt")
local SweepLayer = class("SweepLayer", CBaseLayer)

local _max_show_number = 5

function SweepLayer:ctor(super)
    CBaseLayer.ctor(self)
    self._prefab = {
        path = "prefab_uiHome/ui_fight/UI_SweepLayerNew",
    }
    self._uitype = 2
    self._dropItems = {}
    self._update = false
    self._dt = 0.5
    self._index = 1
    self:onEnter()
end

function SweepLayer:onEnter()
    self:createPnl()
    self._template  = self.layer:Get("container/parentview/viewport/content/template").gameObject
    self._content   = self.layer:GetRectTransformComponent("container/parentview/viewport/content")
    self._container = self.layer:Get("container")
    self._bg        = self.layer:GetRectTransformComponent("container/image_bg")
    self._parentRt    = self.layer:GetRectTransformComponent("container/parentview")

    self._parent    = self.layer:GetScrollRectComponent("container/parentview")
    self._views = {}
end

function SweepLayer:onExit()
    self._template  = nil
    self._content   = nil
    self._container = nil
    self._bg        = nil
    self._parentRt  = nil
    self._parent    = nil
    self._views = nil

    self._level = nil
    self._drops = nil
    self._data  = nil

    if self._dropItems ~= nil then
        for i = #self._dropItems, 1, -1 do
            for _, v in ipairs(self._dropItems[i].items) do
                v.clsbag:clear()
                v:clear()
            end
            self._dropItems[i] = nil
        end
    end
    self._dropItems = nil

    CBaseLayer.onExit(self)
end

function SweepLayer:onBackClick()
    Player:IgnoreLevelUp(false)
    if self._isUpLevel then
        Player:ShowLevelUpLayer()
    end
    if self._callback ~= nil then
        self._callback(true)
    end
    self:onPopLayer()
end

function SweepLayer:show(drops, levelid, callback, oldinfo)
    self._level = Chapter:GetLevel(levelid)
    self._callback = callback
    self._shownum = 0
    self._showidx = 1
    self._drops = drops
    self._data = oldinfo
    self:setDrops(drops[1])
    self:GetAllDrops(drops[1])
    self:showLayer()
    self:playAni("CommonLayerFadeInAni")
end

function SweepLayer:GetAllDrops(items)
    local drops = {}
    -- lua_table_print(items)

    for i = 1, #items - 1 do
        local item1 = items[i]
        local item2 = items[i + 1]
        
        for j = 1, #item1 do
            local itemj1 = item1[j]
            local flag =false
            for k = 1, #item2 do
                local itemj2 = item2[k]
                if itemj1[2] == itemj2[2] then
                    local count = itemj1[3] + itemj2[3]
                    itemj2[3] = count
                    flag = true
                end
            end

            if not flag then
                table.insert(item2, itemj1);
            end
            
        end
    end
    local _transContent = self.layer:Get("container/parentview/dropView/viewport/content")
    local _objItem = self.layer:Get("container/ItemHide/Item").gameObject
    local item
    local length = #items
    local data = items[length]
    table.sort(data,function(a,b)
        return a[2]>b[2]
    end)
    for _, v in pairs(data) do
        item = _transContent:AddChild(_objItem)
        item:GetTextComponent("txt_num"):SetText(v[3])
        item:GetImageComponent("img_icon"):LoadSprite(Item:GetItemIconPath(v[2]))
    end
end

function SweepLayer:setDrops(items)
    self._length = #items
    self._perY = 1 / (self._length - _max_show_number)
    local text = LanguageMgr:GetTextByID(76000065)
    for i = 1, self._length do
        local scrollview = self._content:AddChild(self._template)
        self._dropItems[i] = {}
        local tmp = {}
        for j = 1, #items[i] do
            local key = #items[i] + 1 - j
            tmp[j] = items[i][key]
        end
        self._dropItems[i] = Bag:SetScrollGoods(self._dropItems[i], scrollview, tmp, 3, 715, 160, 0.55, 90, true)
        scrollview.name =  "view"..i
        local posy, disy =  0, 200
        u3d_set_localPos(scrollview, nil, posy - disy * (i - 1))
        scrollview:GetTextComponent("text_count").text = string.format(text , i)
        self._views[i] = scrollview
        if i == self._length then
            scrollview:Get("scroll_bg"):SetVisible(false)
            scrollview:Get("img_line"):SetVisible(true)
        end
    end
    self._content:SetSizeY(200 * self._length)

    local sizeDelta = self._parentRt.sizeDelta
    local count = self._length - 1
    if count > 4 then count = 4 end
    sizeDelta.y =  sizeDelta.y + 200 * count
    self._parentRt.sizeDelta = sizeDelta
    self._container:SetPosition(0, 90 * (count + 1), 0, true)
    self._bg.sizeDelta = CS.UnityEngine.Vector2(self._bg.sizeDelta.x , self._bg.sizeDelta.y + 200 * count)
    self._update = true
end

function SweepLayer:onUpdate(dt)
    self._dt = self._dt + dt
    if self._update then
        if self._dt >0.2 then
            if self._index <= self._length then
                self._views[self._index]:SetVisible(true)
                -- 列表向上滑动
                if self._index > _max_show_number then
                    self._parent.verticalNormalizedPosition = 1 - self._perY * (self._index - _max_show_number)
                else
                    self._parent.verticalNormalizedPosition = 1
                end
                self._dt = 0
                self._index = self._index + 1
            else
                self._update = false
            end
        end
    end
end

return SweepLayer

