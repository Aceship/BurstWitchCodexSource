---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by Administrator.
--- DateTime: 2019/9/6 11:44
---
local CBaseLayer = core.require("xlua/lua_UI/UIBaseLayer.txt")
local LotteryResultLayer = class("LotteryResultLayer", CBaseLayer)
--button_ok   button_func
--按钮
local BTNS = {
    share       = "container/share_obj/button_share",
}

local QltySpine = {
    [Bag.QLTY_UTR]  = { name = "spine_ur", prefab = "prefab_item_spine/spine_qlty_ur"},
    [Bag.QLTY_SSR]  = { name = "spine_ssr", prefab = "prefab_item_spine/spine_qlty_ssr"},
    [Bag.QLTY_SR]   = { name = "spine_sr", prefab = "prefab_item_spine/spine_qlty_sr"},
}

local QualityBG = {
    [Bag.QLTY_SSR]  = "img_zhaohuan_jiesuan_kuang_ssr_02",
    [Bag.QLTY_SR]   = "img_zhaohuan_jiesuan_kuang_sr_02",
    [Bag.QLTY_R]    = "img_zhaohuan_jiesuan_kuang_r_02",
}

local QualityFrame = {
    [Bag.QLTY_SSR]  = "img_zhaohuan_jiesuan_kuang_ssr_01",
    [Bag.QLTY_SR]   = "img_zhaohuan_jiesuan_kuang_sr_01",
    [Bag.QLTY_R]    = "img_zhaohuan_jiesuan_kuang_r_01",
}

local QualityLight = {
    [Bag.QLTY_SSR]  = "img_zhaohuan_jiesuan_kuang_ssr_03",
    [Bag.QLTY_SR]   = "img_zhaohuan_jiesuan_kuang_sr_03",
}

local HeroPosY = {
    446, -351, 513, 513, -291, -291, 446, 446, -351, -351
}

local a = 0.004

--构造函数
function LotteryResultLayer:ctor(super,lottery)
    CBaseLayer.ctor(self)
    self._prefab = {
        path = "prefab_uiHome/sys/UI_LotteryResultLayer",
    }
    self._topData = {
        showBtnBack     = false,
        showPlayerInfo  = false,
        showTopInfo     = false,
        topInfo        = {},
    };
    self._bgData = {
        showEffect = true,
        bgType = BackBgPath.BG_DEF,
    }
    self._fading = true;
    self.lotteryLayer = lottery;
    self:onEnter()
end


--进入Ui调用一次
function LotteryResultLayer:onEnter()
    self:createPnl();
    self:registerButtonEvent(BTNS);

    self:addEventListener(EVENT_TYPE.NOTICE_SYSTEM_TASK, self.__cname, function(drops)
        if drops.talktype == Talk.TYPE_SYSTEM_CFG then
            self:showNotice(drops)
        end
    end)
    self:Init();

    CS.UnityHelper.NotchfitY(self.layer:Get("container/share_obj"))
    CS.UnityHelper.NotchfitY(self.layer:Get("container/img_notice"))
end

--按钮事件
function LotteryResultLayer:onButtonClick(itype)
    if itype == BTNS.share then
        if self._screen == nil then
           -- self._screen =  Groble_ResMgr:Instantiate("prefab_uiHome/ui_home/prefab_share", self.container.transform)
           self._screen = UIShareCtrl:new(self.layer)
        end
        -- self.container.btnok.gameObject:SetActive(false);
        -- self.container.obj_func  .gameObject:SetActive(false);
        self:showScreenUI(false)
        Groble_UIMgr:ShowShareLayer( function ()
            self:showScreenUI(true)
        end,true)
    end
end

--退出按钮事件
function LotteryResultLayer:onBackClick()
    self:onPopLayer();
end

--初始化
function LotteryResultLayer:Init()
    self.isNew                  = false;
    self.rectOk                 = self.layer.transform:Find("container/button_ok"):GetComponent("RectTransform");
    self.isNewPos               = CS.UnityEngine.Vector2(0,self.rectOk.anchoredPosition.y);
    self.unNewPos               = self.rectOk.anchoredPosition
    self.container              = {};
    self.container.transform    = self.layer:Get("container")
    self._anim = self.layer:GetComponent("Animation");
    self.container.btn2         = self.layer:Get("container/button_2")
    self.container.btn1         = self.layer:Get("container/button_1")
    self.container.obj_func     = self.layer:Get("container/button_func")
    self.container.txt_func     = self.layer:GetTextComponent("container/button_func/txt_ok")
    self.container.txt_func_E   = self.layer:GetTextComponent("container/button_func/txt_ok_E")
    self.container.btn_func     = self.layer:GetButtonComponent("container/button_func")
    self.container.btnok        = self.layer:Get("container/button_ok")
    self.container.txt_ok       = self.layer:GetTextComponent("container/button_ok/txt_ok")
    self.container.imgIcon      = self.layer:GetImageComponent("container/button_func/image_icon")
    self.container.txtCost      = self.layer:GetTextComponent("container/button_func/text_cost")
    self.container.objIcon      = self.layer:Get("container/button_func/image_icon")
    self.container.objCost      = self.layer:Get("container/button_func/text_cost")
    self._shareObj              = self.layer:Get("container/share_obj")
   --self._shareTips             = self.layer:Get("container/share_obj/txt_tips")
    self._shareBtn              = self.layer:Get("container/share_obj/button_share")
    self.obj_notice             = self.layer:Get("container/img_notice")
    self.txt_notice             = self.layer:GetTextComponent("container/img_notice/txt_notice")
    self.trans_notice           = self.layer:Get("container/img_notice/txt_notice")
    self.rect_notice            = self.layer:GetRectTransformComponent("container/img_notice/txt_notice")
    self.obj_tips               = self.layer:Get("container/text_tips")
    self._screenUI              = {} --截屏时需要隐藏的ui元素
    self._screenUI[1]           = self._btnSkip
    self._screenUI[2]           = self._shareObj
    self._screenUI[3]           = self.container.obj_func
    self._screenUI[4]           = self.container.btnok
    self._screenUI[8]           = self.obj_notice
    self._screenUI[9]           = self.obj_tips
  --  self._shareTips:SetVisible(GameSdkMgr:IsHasShare())
    self._shareBtn:SetVisible(GameSdkMgr:IsHasShare())
    self._transHero = self.layer:Get("container/obj_hero");
    self._orgPosY = self.layer:Get("container/obj_hero/hero_1"):GetPositionY(true)

    self.container.btn_func:AddButtonListener(function()
        self.cacheID = self.cfg.id
        self.lotteryLayer:CloseAnimLayer();
        if self.cfg.poolcfg[self.index].count == Lottery.One then
            self.lotteryLayer:onLotteryClick(1)
        elseif self.cfg.poolcfg[self.index].count == Lottery.Ten then
            self.lotteryLayer:onLotteryClick(2)
        end
    end)

    self.container.btnok:AddButtonListener(function()
        self.lotteryLayer:CloseAnimLayer();
        if self.cfg.id == Lottery.LotteryType.FirstTime and not Lottery:GetFirstFinish() then
            Lottery:LotteryTestReq(self.cfg.poolcfg[self.index].poolid)
            return
        end

        if Lottery:GetFirstFinish() then
            GEvent:fireEvent(EVENT_TYPE.LOTTERY_FIRST_RESULT)
        end

        local closeID = nil
        if not Lottery:IsLotteryOpen(self.cfg.id) then
            closeID = self.cfg.id
        end
        self.lotteryLayer:OnOkBtnClick(closeID);
        Groble_UIMgr:BackLayerShow()
    end)

    self.layer:GetButtonComponent("container/img_notice"):AddButtonListener(
        function()
            -- self.showTalk = true
            -- Talk:OpenTalkLayer(4)
        end)
end

function LotteryResultLayer:showBtnColor(isNewTen)
    if isNewTen then
        self.container.obj_func:GetComponent("Image").sprite = AssetLoader:LoadAtlasSprite("source_atlas/atlas_common_res", "Common_Btn_Kuan_1")
        self.container.txt_func.color = CS.UnityEngine.Color(1, 1, 1, 1)
        self.container.txt_func_E.color = CS.UnityEngine.Color(1, 1, 1, 1)
    else
        self.container.obj_func:GetComponent("Image").sprite = AssetLoader:LoadAtlasSprite("source_atlas/atlas_common_res", "comm_btn_3")
        self.container.txt_func.color = CS.UnityEngine.Color(0, 0, 0, 1)
        self.container.txt_func_E.color = CS.UnityEngine.Color(0, 0, 0, 1)
    end
end


function LotteryResultLayer:showScreenUI(show)
    for  _,obj in pairs( self._screenUI) do
        if(_ == 9 )then
            obj:SetVisible(not Lottery:GetFirstFinish() and show and self.cfg.id == Lottery.LotteryType.FirstTime);
        else
            obj:SetVisible(show)
        end
    end
    self._screen:SetVisible(not show)
    -- self._shareTips:SetVisible(not Player:HasShared()) GetFirstFinish
    if show then
        self:showNotice()
    else
        -- if self.noticeTween then
        --     self.noticeTween:Kill(false)
        --     self.noticeTween = nil
        -- end
    end
end
-- function LotteryResultLayer:showScreenUI(show)
    -- for  _,obj in pairs( self._screenUI) do
        -- obj:SetVisible(show)
        -- self.obj_tips:SetVisible(false)
    -- end

    -- local cfg = Lottery:GetLotteryCfgById(tonumber(Lottery._lotteryid))
    -- local cfgid = tonumber(cfg.id)
    -- self._screenUI[3]:SetVisible(show and (not Lottery:GetFirstFinish() or cfgid ~= Lottery.LotteryType.FirstTime))
    -- self._screenUI[9]:SetVisible(show and not Lottery:GetFirstFinish())

    -- self._screen:SetVisible(not show)
    -- -- self._shareTips:SetVisible(not Player:HasShared()) GetFirstFinish
    -- if show then
        -- self:showNotice()
    -- else
        -- -- if self.noticeTween then
        -- --     self.noticeTween:Kill(false)
        -- --     self.noticeTween = nil
        -- -- end
    -- end
-- end
--显示UI
function LotteryResultLayer:show(drops, notice)

    Groble_UIMgr:BackLayerHide()
    self._drops = drops
    self:sortDropData()
    self._isTen = #drops == 10
    -- Groble_UIMgr:PlayAni(self.layer.transform, "LotteryItemsLayerAni")
    self._transHero:SetVisible(#drops > 1);
    self:showLotteryItems();
    self.obj_notice:SetVisible(false)
    self.txt_notice:SetText("")
    self:setShareBtn()
    if GameSdkMgr:IsVerifyVer() then
        self._shareObj:SetVisible(false)
    end


    if notice then
        self:doShowNotice()
    end

end

function LotteryResultLayer:setShareBtn()
    self._shareObj:SetVisible(self._isTen)
end

function LotteryResultLayer:SetTenAgainBtnStart(isShow)

    self.container.imgIcon:SetVisible(isShow)
    self.container.txtCost:SetVisible(isShow)

    if(isShow)then
        self.rectOk.anchoredPosition = self.unNewPos;
    else
        self.rectOk.anchoredPosition = self.isNewPos;
        self.container.obj_func:SetVisible(false)
    end
end

function LotteryResultLayer:refreshAgainCost(id,i)
    self.index = i
    local _id = self.cacheID or id
    self.cacheID = nil
    local isFirst = _id == Lottery.LotteryType.FirstTime
    if not isFirst then
        _id = id
    end
    self.cfg = Lottery:GetLotteryTypeCfg(_id)
    local btnShow = true
    if isFirst then
        if not Lottery:GetFirstFinish() then
            local data = Lottery:GetLotteryPoolDataById(_id)
            local curTimes = Lottery:GetFirstTimes() -- data and data.testnum or 0
            local allTimes = self.cfg.lifeCycle
            self.container.txt_func:SetText(string.format(LanguageMgr:GetTextByID(30032), curTimes, allTimes)) -- 继续(%d/%d)
            self.container.txt_ok:SetText(LanguageMgr:GetTextByID(30033)) -- 确认选择
        else
            btnShow = false
        end
    else
        self.container.txt_func:SetText(self.cfg.poolcfg[i].count == Lottery.One and LanguageMgr:GetTextByID(30009) or LanguageMgr:GetTextByID(30007)) -- 召唤1/10次
        self.container.txt_ok:SetText(LanguageMgr:GetTextByID(30005)) -- 确定
    end
    self.container.obj_func:SetVisible(btnShow)
    self.container.btnok:SetVisible(true)

   self.obj_tips:SetVisible(isFirst)
    if isFirst then
        self:setCostUi()
    else
        self:setCostUi(self.container.imgIcon, self.container.txtCost, self.cfg.poolcfg[i])
    end
    -- self.container.btn2:SetVisible(self.cfg.poolcfg[i].count == Lottery.Ten)
    -- self.container.btn1:SetVisible(self.cfg.poolcfg[i].count == Lottery.One)
end

function LotteryResultLayer:setCostUi(imgicon, uitext, cost)

    local show = true
    if not imgicon or not uitext or not cost then
        show = false
    end

    self.container.objIcon:SetVisible(show)
    self.container.objCost:SetVisible(show)

    if not show then
        return
    end

    Item:SetItemIcon(imgicon.transform, cost.cost_cfgid)
    local showstr = ""
    local _count = Item:GetCount(cost.cost_cfgid)
    if _count >= cost.cost_count then
        showstr = string.format(COLOR_STR.LotteryNor, cost.cost_count)
    else
        showstr = string.format(COLOR_STR.LotteryRed, cost.cost_count)
    end
    uitext.text = showstr
end

function LotteryResultLayer:sortDropData()
    -- table.sort(self._drops, function(a, b)
    --     local heroA = Hero:GetHero(a.id)
    --     local heroB = Hero:GetHero(b.id)
    --     if heroA.qlty == heroB.qlty then
    --         return heroA.id < heroB.id
    --     else
    --         return heroA.qlty > heroB.qlty
    --     end
    -- end)
end

function LotteryResultLayer:showLotteryItems()
    if(self.items == nil)then
        self.items = {};
    end
    for i = 1, 10 do
        if(self.items[i] == nil)then
            local item = {};
            item.transform      = self.layer:Get(string.format("container/obj_hero/hero_%d", i))
            item.img_icon       = item.transform:GetImageComponent("trans_anim/img_icon")
            item.img_qlty       = item.transform:GetImageComponent("trans_anim/img_qlty")
            item.obj_qlty       = item.transform:Get("trans_anim/img_qlty")
            item.txt_piece      = item.transform:GetTextComponent("trans_anim/img_piece/txt_num")
            item.img_piece      = item.transform:GetImageComponent("trans_anim/img_piece/img_1")
            item.rect_piece     = item.transform:GetRectTransformComponent("trans_anim/img_piece")
            item.trans_piece    = item.transform:Get("trans_anim/img_piece")
            item.clipAnim       = item.trans_piece:GetComponent("Animation");
            item.doAnim         = item.transform:Get("trans_anim"):GetComponent("Animation");
            item.animRect       = item.transform:Get("trans_anim"):GetComponent("RectTransform");
            item.trans_new      = item.transform:Get("trans_anim/img_new")
            item.txt_name       = item.transform:GetTextComponent("trans_anim/txt_name")
            item.imgBg          = item.transform:GetImageComponent("trans_anim/img_bg")
            item.imgFrame       = item.transform:GetImageComponent("trans_anim/img_frame")
            item.effectBgSR     = item.transform:Get("trans_anim/effect_bg_sr"):GetComponent("ParticleBehaviour");
            item.effectBgSSR    = item.transform:Get("trans_anim/effect_bg_ssr"):GetComponent("ParticleBehaviour");
            item.effectSR       = item.transform:Get("trans_anim/effect_sr"):GetComponent("ParticleBehaviour");
            item.effectSSR      = item.transform:Get("trans_anim/effect_ssr"):GetComponent("ParticleBehaviour");
            item.spine          = nil

            self.items[i] = item;
        end
        self.items[i].animRect:SetAnchoredPosition(0,0);

        --[[if(i % 2 == 0)then
            self.items[i].doAnim:Stop("LotteryHeroAnim_2");
        else
            self.items[i].doAnim:Stop("LotteryHeroAnim");
        end]]--
        local drop = self._drops[i]
        self.items[i].transform:SetVisible(drop ~= nil)
        self.items[i].data = nil;
        if drop ~= nil then
            local cfgid     = drop.id
            local count     = drop.count
            local cfg       = Hero:GetCfg(cfgid)

            if drop.bnew and not self.isNew then self.isNew = true end

            if self.items[i].spine then
                u3d_destory_obj(self.items[i].spine)
                self.items[i].spine = nil
            end
            local qlty = tonumber(cfg.Quality)
            self.items[i].img_qlty:SetImageColor(1, 1, 1, 1)
            self.items[i].img_qlty.sprite = AtlasMgr:LoadHeroQlty(qlty)
            self.items[i].img_qlty:ResetSize()
            if QltySpine[qlty] then
                self.items[i].spine = self.items[i].obj_qlty:CreateChild(QltySpine[qlty].prefab)
                self.items[i].spine.name = QltySpine[qlty].name
                self.items[i].spine:SetVisible(true)
            end

            self.items[i].imgBg:SetEnabled(Bag.QLTY_R == qlty);
            self.items[i].effectBgSR:Stop();
            self.items[i].effectBgSSR:Stop();
            self.items[i].effectSR:Stop();
            self.items[i].effectSSR:Stop();
            self.items[i].imgBg.sprite = AssetLoader:LoadAtlasSprite("source_atlas/atlas_lottery_2", QualityBG[qlty])
            self.items[i].imgFrame.sprite = AssetLoader:LoadAtlasSprite("source_atlas/atlas_lottery_2", QualityFrame[qlty])

            self.items[i].img_piece.sprite = AssetLoader:LoadSprite(cfg.itemPath)
            self.items[i].img_icon.sprite = AssetLoader:LoadSprite("source_avatar/hero/lottery_" .. cfgid)
            self.items[i].img_icon:SetNativeSize()

            self.items[i].txt_name:SetText(cfg.Name)
            self.items[i].trans_new:SetVisible(false);
            self.items[i].img_piece.color = CS.UnityEngine.Color(1, 1, 1, 1)
            self.items[i].txt_piece.color = CS.UnityEngine.Color(1, 1, 1, 1)

            if not drop.bnew then
                count = Hero:Hero2Chip(cfgid).count
                self.items[i].txt_piece:SetText(string.format("+%d", count))
            end
        end
    end
    if(#self._drops > 1)then
        self:playAni("LotteryResult");
    end
    self:showLayer();
end

function LotteryResultLayer:showNotice(msg)
    self.noticeMsg = msg
end

function LotteryResultLayer:doShowNotice(msg)
    if not self.noticeMsg then
        return
    end
    self.txt_notice:SetText(self.noticeMsg and self.noticeMsg.msgstr or "")
    self.noticeMsg = nil
    self.rect_notice:SetAnchoredPosition(700, 0)
    self.noticeTween = self.trans_notice:DOLocalMoveX(-700, 10):SetEase(CS.DG.Tweening.Ease.Linear):OnComplete(function()
        -- self.obj_notice:SetVisible(false)
        self.txt_notice:SetText("")
    end)
end

function LotteryResultLayer:onReshow()
    if self.showTalk then
        Groble_UIMgr:BackLayerHide()
    end
    self.showTalk = false
end


function LotteryResultLayer:onExit()

    if self.noticeTween then
        self.noticeTween:Kill(false)
        self.noticeTween = nil
    end

    self._uitype    = nil
    self._fading    = nil
    self._topData   = nil
    self._bgData    = nil

    CBaseLayer.onExit(self)
end

function LotteryResultLayer:KeyFrameCall(intkey)
    if intkey == 99 then
        --动画结束
        self._fading = false;
        self:showLotteryAnim()
    elseif(intkey == 98)then
        local heroCount = self._isTen and 10 or 1
        for i = 1, heroCount do
            local drop = self._drops[i]
            local cfg  = Hero:GetCfg(drop.id)
            local qlty = tonumber(cfg.Quality)
            self.items[i].trans_new:SetScale(0,0,0);
            self.items[i].trans_new:SetVisible(drop.bnew);
            self.items[i].transform:DOScale(0.91,0.02):SetDelay(i * 0.05):OnComplete(function ()
                if(Bag.QLTY_SR == qlty)then
                    self.items[i].effectSR:Play();
                elseif(Bag.QLTY_SSR == qlty)then
                    self.items[i].effectSSR:Play();
                end
            end);
        end
    elseif(intkey == 97)then
        local heroCount = self._isTen and 10 or 1
        for i = 1, heroCount do
            local drop = self._drops[i]
            local cfg  = Hero:GetCfg(drop.id)
            local qlty = tonumber(cfg.Quality)
            self.items[i].transform:DOScale(0.91,0.02):SetDelay(i * 0.05):OnComplete(function ()
                if(Bag.QLTY_SR == qlty)then
                    self.items[i].effectBgSR:Play();
                elseif(Bag.QLTY_SSR == qlty)then
                    self.items[i].effectBgSSR:Play();
                end
            end)
        end
    end
end

function LotteryResultLayer:showLotteryAnim()

    local heroCount = self._isTen and 10 or 1
    self._anim:CrossFade("LotteryItemCycAnim");
    for i = 1, heroCount do
        local drop = self._drops[i]
        if not drop.bnew then
            self.items[i].clipAnim:Play("LotteryHeroClipAnim");
        end
        --[[if(i % 2 == 0)then
            self.items[i].doAnim:Play("LotteryHeroAnim_2");
        else
            self.items[i].doAnim:Play("LotteryHeroAnim");
        end]]--
    end
end

return LotteryResultLayer;