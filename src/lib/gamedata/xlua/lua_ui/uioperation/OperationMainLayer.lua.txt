---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by Administrator.
--- DateTime: 2019/9/18 15:48
--运营主界面
local CBaseLayer = core.require("xlua/lua_UI/UIBaseLayer.txt")
local OperationMainLayer = class("OperationMainLayer", CBaseLayer)

--构造函数
function OperationMainLayer:ctor(super)
    CBaseLayer.ctor(self)
    self._prefab = {
        path = "prefab_uiOperation/UI_OperationMainLayer",
    }
    self._topData = {
        showBtnBack     = true,
        showPlayerInfo  = false,
        showTopInfo     = true,
        topInfo        = {nil,nil,nil},
        jumpBuy         = false,
    }
    self._fading = false;
    self._hideOtherLayer = true;
    self._addStack = true;
    self:onEnter()
end

--进入Ui调用一次
function OperationMainLayer:onEnter()
    self:createPnl();    
    self:RegisterHandler();
    self:Init();
end

--退出按钮事件
function OperationMainLayer:onBackClick()
    Operation:CloseOperationMainLayer();
end

function OperationMainLayer:onBtnBack()
    uimgr:ShowInterimLayer(CTime.delayTime,function ()
        self:onPopLayer();
    end)
end

--初始化
function OperationMainLayer:Init()
    self.m_pagingTogs = {};
    self.m_bottomTogs = {};
    self.m_cfgs = {};
    self.m_allLayers = {};
    self.m_selectType = nil;
    self.m_selectCfgId = nil;
    self._alpha = -0.1;
    self._updateA = false;
    self.isInit = true;
    self._pagingTogBgShowState = true;
    
    self.m_pagingTogPrefab  = self.layer:Get("container/item_hide/paging_tog").gameObject;
    self.m_bottomTogPrefab  = self.layer:Get("container/item_hide/bottom_tog").gameObject;

    self.m_objPagingTogListBg   = self.layer:Get("container/paging_tog_view");
    self.m_pagingTogListBg      = self.layer:Get("container/paging_tog_view/viewport/content");
    self.m_pagingTogListBgRect  = self.m_pagingTogListBg:GetComponent("RectTransform");
    
    self.m_bottomTogListBg      = self.layer:Get("container/bottom_tog_view/viewport/content");
    self.m_bottomTogListRect    = self.m_bottomTogListBg:GetComponent("RectTransform");

    self._spinePnl = self.layer.transform:Find("spine_parent");

    self._layerParent = self.layer:Get("ui_operation_parent")

end

--显示UI
function OperationMainLayer:show(id,uid,playAnim)
    self:showLayer();
    if(playAnim == nil)then
        playAnim = true;
    end
    if(playAnim)then
        self:playAni("OperationMainLayerAni");
    end
    self:InitUI(id,uid);
end

function OperationMainLayer:UpdateData()
    for i, v in ipairs(self.m_cfgList) do
        local tempCfgs = Operation:GetActiveListCfgById(v.id).table;
        self.m_cfgs[v.id] = {}
        for k, cfg in ipairs(tempCfgs) do
            if Operation:GetActiveIsOpenByUid(cfg.UID) then
                table.insert(self.m_cfgs[v.id],cfg);
            else
                AppMgr:LogInfo("==================未开启" .. cfg.UID)
            end
        end
    end
end

--初始化UI
function OperationMainLayer:InitUI(id,uid)
    if(self.m_cfgList == nil or {})then
        self.m_cfgList = Operation:GetActiveListByType(Operation.LayerType.Store);
    end
    self:UpdateData()
    local openNum = 0;
    local tempArr = {};
    for k, v in ipairs(self.m_cfgList) do
        local isOpen,timerId = Operation:GetActiveListIsOpenById(v.id);--获取活动是否开启,倒计时
        tempArr[k] = {
            isOpen = isOpen,
            timerId = timerId
        }
        if(isOpen)then
            openNum = openNum + 1;
        end
    end
    if(openNum > 3)then
        self.m_bottomTogListRect:SetPivot(0, 0.5)
    else
        self.m_bottomTogListRect:SetPivot(0.5, 0.5)
    end
    for k, v in ipairs(self.m_cfgList) do
        local isOpen,timerId;
        isOpen = tempArr[k].isOpen;
        timerId = tempArr[k].timerId
        if(isOpen)then
            openNum = openNum + 1;
            if(self.m_bottomTogs[k] == nil)then
                local obj = self.m_bottomTogListBg:AddChild(self.m_bottomTogPrefab)
                self.m_bottomTogs[k] = core.require("xlua/lua_UI/Controller/MToggleItem.txt"):new(obj.transform);
                self.m_bottomTogs[k]:AddListener(function (k,isOn)
                    self:SetBottomTogClick(k,isOn);
                end);
            end
            local data = {
                id = v.id,
                name = v.Name,
                timer = timerId;
                imgPath = Operation.IMAGE_PATH .. v.Picture,
            }
            if(self.m_selectCfgId ~= k)then
                self.m_bottomTogs[k]:SetData(data);
            end
        end
    end
    self._jumpId = uid;--跳转界面UID
    if(id == nil)then--底部togId
        if(self.m_bottomTogs[1].m_tog.isOn)then
            self:SetBottomTogClick(1,true);
        else
            self.m_bottomTogs[1].m_tog.isOn = true;
        end
    else
        if(self.m_bottomTogs[id].m_tog.isOn)then
            self:SetBottomTogClick(id,true);
        else
            self.m_bottomTogs[id].m_tog.isOn = true;
        end
    end

    self:UpdateBottomTogRedPoint();
end

--设置底部红点提示
function OperationMainLayer:UpdateBottomTogRedPoint()
    local tempTogState = Operation:GetBottomTogRedState();
    for k, v in ipairs(self.m_cfgList) do
        if(self.m_bottomTogs[k] ~= nil)then
            self.m_bottomTogs[k]:SetRedImg(tempTogState[v.id]);
        end
    end
end

--底部tog点击事件
function OperationMainLayer:SetBottomTogClick(cfgid,isOn)
    if not isOn then return end
    
    --local open = Operation:GetActiveListIsOpenById(cfgid);
    --if(not open)then
        --UIMgr:ShowTipsLayer(LanguageMgr:GetTextByID(880003))
        --return;
    --end
    if(self.m_selectCfgId  == cfgid and self._jumpId == nil)then
        return;
    end
    -- table.print(self.m_cfgs[cfgid])
    for k, v in ipairs(self.m_cfgs[cfgid]) do
        if(self.m_pagingTogs[k] == nil)then
            local obj = self.m_pagingTogListBg:AddChild(self.m_pagingTogPrefab)
            self.m_pagingTogs[k] = core.require("xlua/lua_UI/Controller/MToggleItem.txt"):new(obj.transform);
            self.m_pagingTogs[k]:AddListener(function (uid,isOn)
                self._selectPagingTog = self.m_pagingTogs[k];
                self:SetPagingTogClick(uid,isOn);
            end);
            self.m_pagingTogs[k]:AddAction(function (trans)
                trans.localScale = CS.UnityEngine.Vector3(0,1,1);
                local dt = trans:DOScaleX(1, 0.1):SetDelay(0.05 * k + 0.1);
            end);
        end

        if(v.timer == nil)then
            v.timer = 0;
            if(v.DisplayConditions ~= "-1")then
                local tempData = {};
                tempData = lua_parse_cfg(v.DisplayConditions,true);
                for ii, vv in ipairs(tempData) do
                    if(vv[1] == Operation.OpenConditionType.Time)then
                        v.timer = vv[2];
                    end
                end
            end
        end
        local data = {
            id = v.UID,
            name = v.Name,
            timer = v.timer or 0;
            nameE = v.EnglishName,
        }
        if(self.m_selectCfgId  ~= cfgid)then
            self.m_pagingTogs[k]:SetData(data);
        end
        if(self._jumpId == nil)then--无跳转,默认打开第一个界面
            self._jumpId = v.UID;
        end
        if( self._jumpId == v.UID)then
            self._selectPagingTog = self.m_pagingTogs[k];
        end
    end
    local cfgs = Operation:GetActiveCfgByUID(self._jumpId);
    if(self._pagingTogBgShowState == false)then--分页TogBG显示状态
        if(cfgs.showType == Operation.ShowType.Only)then--无
            self.m_objPagingTogListBg:SetVisible(false);
        else
            self.m_objPagingTogListBg:SetVisible(true);
            self._pagingTogBgShowState = true;
        end
    end
    if(self._jumpId ~= nil)then
        if(self._selectPagingTog.m_tog.isOn == true)then
            self:SetPagingTogClick(self._jumpId,isOn);
        else
            self._selectPagingTog.m_tog.isOn = true;
        end
        self._jumpId = nil;
    end
    if(self.isInit)then--初次进入界面
        self.isInit = false;
        CS.UIHelpScript.Instance:ForceRebuildLayoutImmediate(self.m_pagingTogListBgRect)
    end
    if(#self.m_cfgs[cfgid] < #self.m_pagingTogs)then--隐藏无用的TOG
        for i = #self.m_cfgs[cfgid] + 1, #self.m_pagingTogs do
            self.m_pagingTogs[i]:HideItem();
        end
    end
    self.m_selectCfgId = cfgid;
    self:UpdatePagingTogRedPoint();
end

--秒更新
function OperationMainLayer:onPerSecondUpdate()
    for _, v in pairs(self.m_pagingTogs) do
        v:UpdateTime();
    end
end

--设置左边Tog红点
function OperationMainLayer:UpdatePagingTogRedPoint()
    local tempTogState = Operation:GetPagingTogRedState();
    for k, v in ipairs(self.m_cfgs[self.m_selectCfgId]) do
        if(self.m_pagingTogs[k] ~= nil)then
            self.m_pagingTogs[k]:SetRedImg(tempTogState[tonumber(v.UID)] > 0);
        end
    end
end

-- 大类中的小页签
function OperationMainLayer:SetPagingTogClick(itype,isOn)
    if false == isOn then return end

    itype = tonumber(itype);
    if self.m_selectType == itype then return end

    if(self.m_allLayers[self.m_selectType] ~= nil)then
        self.m_allLayers[self.m_selectType]:hide();
    end
    self.m_selectType = itype;
    Operation:SetCurSelectUID(itype);

    if(self.m_allLayers[itype] == nil)then
        if(itype == Operation.ActivityID.GiftPackage)then--特惠礼包
            -- self.m_allLayers[itype] = core.require("xlua/lua_UI/UIOperation/GiftPackageLayerGiftPackageLayer.txt"):new();
        elseif(itype == Operation.ActivityID.DailyDeal)then--每日特惠
            self.m_allLayers[itype] = core.require("xlua/lua_UI/UIOperation/DailyDealLayer.txt"):new(self._layerParent);
        elseif(itype == Operation.ActivityID.GrowthPlan)then--成长计划
            -- self.m_allLayers[itype] = core.require("xlua/lua_UI/UIOperation/GrowthPlanOneLayer.txt"):new(itype);
        elseif(itype == Operation.ActivityID.UpgradePackage)then--升级礼包
            self.m_allLayers[itype] = core.require("xlua/lua_UI/UIOperation/UpgradePackageLayer.txt"):new(self._layerParent);
        elseif(itype == Operation.ActivityID.MonthlyCard)then--月卡
            self.m_allLayers[itype] = core.require("xlua/lua_UI/UIOperation/MonthlyCardLayer.txt"):new(self._layerParent);
        elseif(itype == Operation.ActivityID.SkinBuy)then
            self.m_allLayers[itype] = core.require("xlua/lua_UI/UIOperation/SkinBuyShopLayer.txt"):new(self._layerParent);
        elseif(itype == Operation.ActivityID.JewelBuy)then
            self.m_allLayers[itype] = core.require("xlua/lua_UI/UIOperation/JewelBuyLayer.txt"):new(self._layerParent);--兑换
        elseif(itype == Operation.ActivityID.WitchCoin)then
            self.m_allLayers[itype] = core.require("xlua/lua_UI/UIOperation/RechargeLayer.txt"):new(self._layerParent);--充值

        elseif(itype == Operation.ActivityID.WeekCard  or itype == Operation.ActivityID.WeekGift)then
            if(self._comNewShopLayer == nil)then
                self._comNewShopLayer = core.require("xlua/lua_UI/HomeScene/ComNewShopLayer.txt"):new(self._layerParent)
            end
            self.m_allLayers[itype] = self._comNewShopLayer;
        elseif(itype == Operation.ActivityID.ShopWorldBoss or itype == Operation.ActivityID.ShopLateAtNight or
        itype == Operation.ActivityID.ShopSundryGoods)then
            if(self._shopLayer == nil)then
                self._shopLayer = core.require("xlua/lua_UI/UIOperation/ShopLayer.txt"):new(self._layerParent);
            end
            self.m_allLayers[itype] = self._shopLayer;
        end
        if(self.m_allLayers[itype] ~= nil)then
            self.m_allLayers[itype]:hide();
        end
    end

    local cfgs = Operation:GetActiveCfgByUID(itype)
    self.m_objPagingTogListBg:SetVisible(cfgs.showType ~= Operation.ShowType.Only)

    if self.m_allLayers[itype] == nil then return end

    --用于控制UI的显示self.m_cfgs[self.m_selectCfgId],
    if(self.imgBg == nil)then
        self.imgBg = self.layer.transform:Find("img_bg"):GetComponent("Image");
        self.imgAD = self.layer.transform:Find("container/ad_img"):GetComponent("Image");
        self.adRect = self.imgAD.transform:GetComponent("RectTransform");
    end
    Operation:SetOperationImage(self.imgBg,cfgs.Picture,Operation.BG_IMAGE_FILE);--加载背景图片
    if(cfgs.ad_Image ~= nil)then
        Operation:SetOperationImage(self.imgAD,cfgs.ad_Image[1],Operation.AD_IMAGE_FILE);--加载广告字图片
        local tempV;
        if(cfgs.ad_Image[4] == nil)then
            tempV = CS.UnityEngine.Vector2(0.5, 1);
        else
            tempV = CS.UnityEngine.Vector2(tonumber(cfgs.ad_Image[4]), tonumber(cfgs.ad_Image[5]));
        end
        self.imgAD.color = CS.UnityEngine.Color(1,1,1,0);
        local dt = self.imgAD:DOColor(CS.UnityEngine.Color(1,1,1,1),0.5);
        self.adRect.anchorMax = tempV;
        self.adRect.anchorMin = tempV;
        self.adRect.pivot = tempV;
        self.adRect.anchoredPosition = CS.UnityEngine.Vector2(tonumber(cfgs.ad_Image[2]), tonumber(cfgs.ad_Image[3]));
    else
        self.imgAD.sprite = nil;
    end
    if(cfgs.spine ~= nil)then
        self:LoadHeroSpine(cfgs.spine[1],cfgs);
    else
        if(self._curMoudle ~= nil)then
            self.currHeroId = nil;
            u3d_destory_obj(self._curMoudle);
            self._curMoudle = nil;
        end
    end

    self._topData.topInfo = cfgs.currencyIds;--货币类型
    Groble_UIMgr:SetTopData(self._topData);

    self.m_allLayers[itype]:show(cfgs, function(id,uid) self:InitUI(id,uid) end);
end

--加载英雄spine
function OperationMainLayer:LoadHeroSpine(heroId,cfg)
    if(self.currHeroId ~= heroId)then
        self.currHeroId = heroId;
        Hero:LoadSpineAsync(self.__cname,self._spinePnl, tonumber(heroId), Hero.SPINE_UI_TYPE_WITCH,
            function(obj)
                self._alpha = -0.1
                self._curMoudle = obj
                self:_refreshSpineInfo(cfg)
            end)
    else
        self:_refreshSpineInfo(cfg)
    end
end

function OperationMainLayer:_refreshSpineInfo(cfg)
    if self._curMoudle ~= nil then
        self.skeletonAni = self._curMoudle:GetComponent("SkeletonAnimation")
        self.skeletonAni:GetComponent("MeshRenderer").sortingOrder = Operation.SPINE_ORDER;
        self._curMoudle.transform:SetPosition(cfg.spinePos[1][1],cfg.spinePos[1][2],cfg.spinePos[1][3], true);
        self._curMoudle.transform:SetScale(cfg.spineScale[1][1],cfg.spineScale[1][2],cfg.spineScale[1][3]);
        self._updateA = true
        if self._alpha < 1 then
            self.skeletonAni.Skeleton.A = 0
        else
            self.skeletonAni.Skeleton.A = 1
        end
    else
        self._updateA = false
    end
end

function OperationMainLayer:onUpdate(dt)
    if(self._curMoudle == nil)then
        return;
    end
    if self._updateA then
        self._alpha = self._alpha + dt*2
        if self._alpha >= 1.0 then
            self._alpha = 1.0
            self._updateA = false
        end
        if self._alpha > 0 then
            self.skeletonAni.Skeleton.A = self._alpha
        end
    end
end

function OperationMainLayer:onExit()    
    for i, v in pairs(self.m_pagingTogs) do
        if(v ~= nil)then
            v:OnDestroy();
        end
    end
    for i, v in pairs(self.m_bottomTogs) do
        if(v ~= nil)then
            v:OnDestroy();
        end
    end
    for i, v in pairs(self.m_allLayers) do
        if(v ~= nil)then
            v:onPopLayer();
        end
    end
    self.m_pagingTogPrefab  = nil
    self.m_bottomTogPrefab  = nil
    self.m_objPagingTogListBg   = nil
    self.m_pagingTogListBg      = nil
    self.m_pagingTogListBgRect  = nil
    self.m_bottomTogListBg      = nil
    self.m_bottomTogListRect    = nil

    self._layerParent   = nil

    self._shopLayer     = nil;
    self._comNewShopLayer = nil;
    self.m_pagingTogs   = nil
    self.m_bottomTogs   = nil
    self.m_cfgs         = nil
    self.m_allLayers    = nil
    CBaseLayer.onExit(self);
end

--注册
function OperationMainLayer:RegisterHandler()
    self:addEventListener(EVENT_NAME.UPDATE_OPER_TOG_STATE,self.__cname,function()
        Operation:SetTogRedPoint();
        self:UpdateBottomTogRedPoint();
        self:UpdatePagingTogRedPoint();
    end);
    self:addEventListener(EVENT_TYPE.UPDATE_GIFT_BAG,self.__cname,function(isUptateDay)
        if(isUptateDay)then
            Groble_UIMgr:ShowGameWordTipsLayer(99000060);
            self:UpdateData();
            if Player:IsSysFuncOpen(Player.SYS_FUNC.sys_benefits) then
                if Guide:ForceGuideIsEnd() then
                end
            end
        end
    end);
end

function OperationMainLayer:SetBGImage(path)
    Operation:SetOperationImage(self.imgBg,path,Operation.BG_IMAGE_FILE);--加载背景图片
end

function OperationMainLayer:SetInitState(initState)
    self.isInit = initState;
end

return OperationMainLayer;

