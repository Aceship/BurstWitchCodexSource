---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by Administrator.
--- DateTime: 2019/9/10 11:27
---
local CBaseLayer = core.require("xlua/lua_UI/UIBaseLayer.txt")
local SkillUpLayer = class("SkillUpLayer", CBaseLayer)
local BTNS = {
    btnBack = "img_mask",
    btnNo = "container/btn_no",
    btnYes = "container/btn_yes",
}

function SkillUpLayer:ctor(super)
    CBaseLayer.ctor(self)
    self._prefab = {
        path = "prefab_witch/UI_SkillUpLayer",
    }
    -- self._topData = {
    --     showBtnBack     = false
    -- }
    -- self._uitype = 2
    self._fading = false;
    self:onEnter()
end

function SkillUpLayer:onEnter()
    self:createPnl();
    self:registerButtonEvent(BTNS);

    self:addEventListener(EVENT_TYPE.JUMP_OVER_EVENT,self.__cname, function()
        self:onBackClick();
    end)
    self._aniPanelFadeInEndCallback = function()
        for _, v in ipairs(self.skillItems) do
            v.scrolDes.vertical = true;
        end
    end;
    self._upTime = Player.SendMessageCD_002 * 0.3;
    self:reSetState()
    self._uicostctrl = UICostCtrl:new(self.layer:Get("container/item_cost_bg"), 4)
end

function SkillUpLayer:onExit()
    if self._uicostctrl ~= nil then
        self._uicostctrl:UICostCtrlDtor()
        self._uicostctrl = nil
    end

    CBaseLayer.onExit(self)
end

function SkillUpLayer:onUpdate(dt)
    if self._update then
        self._dt = self._dt + dt
        if self._dt >= self._upTime then
            self:lvUpReq()
            self:reSetState()
        end

    end
end
function SkillUpLayer:reSetState()
    self._update = false
    self._dt = 0
    self._upNum = 0
    --总消耗
    self._tbl ={}
end

function SkillUpLayer:lvUpReq()
    if self._upNum > 0 then
        Hero:SkillUpReq(self._hero.id, self._slot,self._upNum)
    end
end

function SkillUpLayer:onButtonClick(itype)
    if(itype == BTNS.btnNo or itype == BTNS.btnBack)then
        self:onBackClick();
    elseif(itype == BTNS.btnYes)then
        if self.skill.level == self.skill.maxlevel then
            Groble_UIMgr:ShowTipsLayer(LanguageMgr:GetTextByID(700000194))
            return
        end
        local upEnable, minHero = Skill:SkillUpEnable(self._slot, self._hero.level, self.skill.level, self.skill.maxlevel)
        if not upEnable then
            Groble_UIMgr:ShowTipsLayer(string.format(LanguageMgr:GetTextByID(700000197), minHero)) -- 魔女%d级可升级
            return
        end
        if(self._lvUpLackCfgId ~= 0)then
            Groble_UIMgr:ShowLackCurrencyTips(self._lvUpLackCfgId)
            return;
        end
        for cfgid, num in pairs(self._costTbl) do
            if self._tbl[cfgid] == nil then
                local have = Item:GetCount(cfgid)
                if  num > have then
                    AppMgr:LogInfo("消耗超过物品上限,本次升级请求return 处理")
                    return
                else
                    self._tbl[cfgid] = num
                end
            else
                --保护检测
                local have = Item:GetCount(cfgid)
                if (self._tbl[cfgid] + num) > have then
                    AppMgr:LogInfo("消耗超过物品上限,本次升级请求return 处理")
                    return
                else
                    self._tbl[cfgid] = self._tbl[cfgid] + num
                end
            end
        end
        self._update = true
        self._dt = 0
        self._upNum = self._upNum + 1
        --刷新界面
        Groble_SoundMgr:PlayEffect(20000018)
        self.skillItems[1].effect:Stop()
        self.skillItems[2].effect:Stop()
        self.skillItems[1].effect:Play()
        self.skillItems[2].effect:Play()
        Hero:SkillLvUp(self._hero, self._slot)
        Hero:CalcSkillCd(self._hero)
        self:SetSkillInfo()
    end
end

function SkillUpLayer:onBackClick()
    if self._update then
        self:lvUpReq()
    end
    if(self.callback)then
        self.callback();
    end
    self:onPopLayer();
end

function SkillUpLayer:show(heroId,skillIndex,callback)
    self._lvUpLackCfgId = 0;
    self._hero = Hero:GetHero(heroId);
    self.callback = callback
    self._slot = skillIndex;
    self.skill = self._hero.skills[skillIndex];
    self.curSkill = Skill:GetHeroSkillCfg(self.skill.cfgid,  self._hero.star);
    self.curSkillShow = Skill:GetHeroSkillShowCfg(self.skill.showid, self._hero.star);

    self:SetSkillInfo();
    self:playAni("CommonLayerFadeInAni");
end

local   skillItemNum = 2;
function SkillUpLayer:SetSkillInfo()
    self.txt_tips = self.layer:GetTextComponent("container/txt_tips")
    if(self.skillItems == nil)then
        self.skillItems = {};
    end
    for i = 1, skillItemNum do
        if(self.skillItems[i] == nil)then
            self.skillItems[i] = {};
            self.skillItems[i].transform = self.layer.transform:Find("container/skill_info/info_"..i);
            self.skillItems[i].imgIcon = self.skillItems[i].transform:Find("img_icon"):GetComponent("Image");
            self.skillItems[i].txtLv = self.skillItems[i].transform:Find("txt_skill_lv"):GetComponent("Text");
            self.skillItems[i].txtName = self.skillItems[i].transform:Find("txt_skill_name"):GetComponent("Text");
            self.skillItems[i].txtRelease = self.skillItems[i].transform:Find("txt_release"):GetComponent("Text");
            self.skillItems[i].txtExpend = self.skillItems[i].transform:Find("txt_expend"):GetComponent("Text");
            self.skillItems[i].txtCD = self.skillItems[i].transform:Find("txt_cd"):GetComponent("Text");
            self.skillItems[i].txtDes = self.skillItems[i].transform:Find("des/viewport/txt_des"):GetComponent("Text");
            self.skillItems[i].rectTxtDes = self.skillItems[i].txtDes.transform:GetComponent("RectTransform");
            self.skillItems[i].scrolDes = self.skillItems[i].transform:Find("des"):GetComponent("ScrollRect");
            self.skillItems[i].rectDes = self.skillItems[i].transform:Find("des"):GetComponent("RectTransform");
            self.skillItems[i].arrows = self.skillItems[i].transform:Find("des/img_arrows");
            self.skillItems[i].scrolDes.vertical = false;
            self.skillItems[i].effect = self.skillItems[i].transform:Find("effect"):GetComponent("ParticleBehaviour")
        end
    end
    self:SetSkillItemUI(self.skillItems[1],self.curSkill,self.curSkillShow,self.skill.level);
    if self.skill.level < self.skill.maxlevel then
        self:SetSkillItemUI(self.skillItems[2],self.curSkill,self.curSkillShow,self.skill.level + 1);
        local upLvData =  lua_parse_cfg(Skill:GetSKillCost(self.curSkill.skillType, self.skill.level).Materials,true)
        self._costTbl = {}
        self._lvUpLackCfgId = self._uicostctrl:UpdateUICostCtrl(upLvData, self._costTbl, self._tbl)
        self.layer:Get("container/obj_maxtips"):SetVisible(false)
    else
        self.skillItems[1].transform:SetPosition(0,0,0,true)
        self.skillItems[2].transform:SetVisible(false)
        self.layer:Get("container/obj_maxtips"):SetVisible(true)
        self.layer:Get("container/item_cost_bg"):SetVisible(false)
    end
end

function SkillUpLayer:SetSkillItemUI(item,data,showdata,level)
    if(item == nil)then
        return;
    end
    Skill:SetSkillIcon(item.imgIcon, data.cfgid);
    item.txtName.text = showdata.name;
    item.txtLv.text = level.."/"..self.skill.maxlevel;
    local a,b = math.modf(self.skill.playcd)
    local cdTime = b > 0 and self.skill.playcd or a
    item.txtCD.text = cdTime.."s";
    if tonumber(data.playtype) ~= Skill.TYPE_KILL then
        item.txtCD.text  = "--"
    end
    item.txtDes.text = Skill:GetSkillHurtDesc(self._hero.attrs[CAttr.TYPE_ATK],data.cfgid,showdata.cfgid,true,level,self._hero.star)
    item.rectTxtDes.sizeDelta = CS.UnityEngine.Vector2(item.rectTxtDes.sizeDelta.x,item.txtDes.preferredHeight);
    item.rectTxtDes.anchoredPosition = CS.UnityEngine.Vector2(0,0);
    set_obj_active(item.arrows,item.rectTxtDes.sizeDelta.y > item.rectDes.sizeDelta.y)
    item.txtRelease.text =Skill.PLAY_TYPE_NAME[Skill.PLAY_TYPES[data.playtype]];
    if(tonumber(data.gf_cost) == 0)then
        item.txtExpend:SetTextById(881013);
    else
        item.txtExpend.text = data.gf_cost / 10000;
    end
    if self.skill.level == self.skill.maxlevel then
        return
    end
    local upEnable, minHero = Skill:SkillUpEnable(self._slot, self._hero.level, self.skill.level, self.skill.maxlevel)
    self.txt_tips:SetText(upEnable and "" or string.format(LanguageMgr:GetTextByID(700000197), minHero)) -- 魔女%d级可升级
end

function SkillUpLayer:onLayerFadeInEndCall()
    Guide:ContinueGuideEvent(self.__cname)
end

return SkillUpLayer;