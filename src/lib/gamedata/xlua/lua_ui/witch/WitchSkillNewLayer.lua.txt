---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by Administrator.
--- DateTime: 2020/10/22 11:28
---
----
local CBaseLayer = core.require("xlua/lua_UI/UIBaseLayer.txt")
local WitchSkillNewLayer = class("WitchSkillNewLayer", CBaseLayer)

local BUTTON_TYPE = {
    Study       = "container/skill_info/info_study/btn_upgrade",
}

function WitchSkillNewLayer:ctor(super)
    CBaseLayer.ctor(self)
    self._prefab = {
        path = "prefab_witch/UI_WitchSkillNewLayer",
    }
    self._topData = {
        showBtnBack     = true,
        showPlayerInfo  = false,
        showTopInfo     = false,
        topInfo         = {},
    };
    self._bgData = {
        showEffect = false,
        bgType = BackBgPath.Null,
    }
    self._addStack = true;
    self._fading = false;
    self._hideOtherLayer = true;
    self:onEnter()
end

function WitchSkillNewLayer:onBackClick()
    self:onPopLayer()
end

function WitchSkillNewLayer:initObj()
    self._talentEffect     = self.layer:Get("effect_xunh")
    self._infoStudy     = self.layer:Get("container/skill_info/info_study")
    self._studyIcon     = self.layer:Get("container/skill_info/info_study/image_icon")
    self._studyNum      = self.layer:Get("container/skill_info/info_study/text_number")
    
    self._skillInfo     = self.layer:Get("container/skill_info")
    self._talentInfo    = self.layer:Get("container/talent_info")
    self._talentName     = self.layer:GetTextComponent("container/talent_info/txt_title")
    self._talentDesc     = self.layer:GetTextComponent("container/talent_info/txt_desc")
    self._talentUnlock   = self.layer:GetTextComponent("container/talent_info/txt_unlock")
    self._talentBg       = self.layer:Get("container/talent_info/img_costbg")
    self.skillRedpoint = self.layer:Get("container/skill_info/info_study/img_red_tips")
end

function WitchSkillNewLayer:onEnter()
    self:createPnl()
    self:initObj()
    self:registerButtonEvent(BUTTON_TYPE)
    self:addRedTipsListener()
    
    self._skillctrl = UISkillCtrl:new(self.layer:Get("container"), 
        function(index)
            self:onSelectSlot(index)
        end)

    self._talentctrl = UITalentCtrl:new(self.layer:Get("container/talent"),
        function(index, transform)
            self:onTalentClick(index, transform)
        end)
end

function WitchSkillNewLayer:onExit()
    self._talentEffect     = nil

    self._infoStudy     = nil
    self._studyIcon     = nil
    self._studyNum      = nil
    self._skillInfo     = nil

    self._talentInfo    = nil
    self._talentName    = nil
    self._talentDesc    = nil
    self._talentUnlock  = nil
    self._talentBg      = nil

    self._skillcfg  = nil

    if self._skillctrl ~= nil then
        self._skillctrl:UISkillCtrlDtor()
        self._skillctrl = nil
    end

    if self._talentctrl ~= nil then
        self._talentctrl:UITalentCtrlDtor()
        self._talentctrl = nil
    end

    CBaseLayer.onExit(self)
end

function WitchSkillNewLayer:onButtonClick(itype)
    if itype == BUTTON_TYPE.Study then
        self:onSkillStudy()
    end
end

function WitchSkillNewLayer:onUpdateCurrency()
    self:setLevelUpCost()
end

function WitchSkillNewLayer:onTalentClick(index, transform)
    self._slotClick = false
    local talent = self._hero.new_talent[index]
    if talent ~= nil then
        self._talentEffect.transform:SetParent(transform)
        self._talentEffect:SetPosition(0, -10, 0, true)
        self._talentEffect:SetVisible(true)
        self._skillctrl:SetSkillInfoVisible(false)
        self._skillInfo:SetVisible(false)
        self._talentInfo:SetVisible(true)
        local cfg = Hero:GetTalentCfg(talent[2])
        self._talentDesc.text = lua_color_str(cfg.desc)
        self._talentName.text = cfg.Talent_Name
        if self._hero.star >= talent[1]   then
            self._talentUnlock:SetVisible(false)
            self._talentBg:SetVisible(false)
        else
            self._talentUnlock:SetVisible(true)
            self._talentBg:SetVisible(true)
            self._talentUnlock.text = string.format(LanguageMgr:GetTextByID(70000024), talent[1])
        end
        self._slot = -1
    end
end

function WitchSkillNewLayer:show(heroid,hideLvUpUI,skinId)
    self._slot      = -1
    self._hideLvUpUI = hideLvUpUI;
    if(skinId ~= nil and tonumber(skinId) > 0)then
        skinId = tonumber(skinId);
        local hero = Hero:GetHero(heroid);
        self._hero = lua_deep_copy(hero)
            self._hero.skinid = skinId
            Hero:SetHeroSkills(self._hero)
    else
        self._hero = Hero:GetHero(heroid)
    end
    self._skillctrl:InitUISkillCtrl(self._hero, hideLvUpUI, skinId)
    self._talentctrl:InitUITalentCtrl(self._hero)
    self:showLayer()
    self:onUpdateRedTips()
    self:playAni("WitchSkillNewAni")
end

function WitchSkillNewLayer:onSelectSlot(slot)
    if self._slot == slot then return end

    self._slot = slot
    self._skillInfo:SetVisible(true)
    self._skillctrl:SetSkillInfoVisible(true)
    self._talentInfo:SetVisible(false)

    self._talentEffect:SetVisible(false)
    self:setLevelUpCost()
    self:onUpdateRedTips() 
end

function WitchSkillNewLayer:setLevelUpCost()
    self._skillcfg = Skill:GetHeroSkillCfg(self._hero.skills[self._slot].cfgid, self._hero.star)
    local skill = self._hero.skills[self._slot]
    if(self._hideLvUpUI)then
        self._infoStudy:SetVisible(false);
    else
        self._infoStudy:SetVisible(skill.level < skill.maxlevel )
    end
    self._lvUpLackCfgId = 0
    if skill.level < skill.maxlevel then
        local costcfg = Skill:GetSKillCost(self._skillcfg.skillType, skill.level)
        local coin, items = parse_cost_cfg(costcfg.Materials)
        if(not self._hideLvUpUI)then
            if(self.infoStudy == nil)then
                self.infoStudy = Hero:NewSkillLvUpCostUi( self._infoStudy, 2)
            end
            self._lvUpLackCfgId = Hero:SetSkillLvUpCostUi(self.infoStudy, 2, items)
        end
        self._studyIcon:SetVisible(coin[2] > 0)
        self._studyNum:SetVisible(coin[2] > 0)
        if coin[2] > 0 then
            local lack = set_cost_color(self._studyNum, coin[1], coin[2])
            if lack then
                self._lvUpLackCfgId = coin[1]
            end
        end
    end
end

function WitchSkillNewLayer:onSkillStudy()
    --if self._lvUpLackCfgId == 0 then
    if(not GTemp:IsSkillLevelUpOn()) then
        GTemp:SetSkillLevelUpOn(true)
        Groble_UIMgr:HideBackBtn()
        self.skillUpLayer = core.require("xlua/lua_UI/Witch/SkillUpLayer.txt"):new()
        self.skillUpLayer:show(self._hero.id, self._slot,function ()
            Groble_UIMgr:ShowBackBtn()
            self:onSkillStudyRep()
            GTemp:SetSkillLevelUpOn(false)
        end);
    end
    --else
    -- Groble_UIMgr:ShowLackCurrencyTips(self._lvUpLackCfgId)
    --end
end

function WitchSkillNewLayer:onSkillStudyRep()
    self:setLevelUpCost()
    self:onUpdateRedTips()
    self._skillctrl:UpdateUISkillCtrl()
end

function WitchSkillNewLayer:onUpdateRedTips()
    if self._hideLvUpUI then
        self.skillRedpoint:SetVisible(false)
        return
    end

    self._skillctrl:UpdateUISkillTips(self._hero.id)

    local showtips = Hero:HasSlotSkillLevelUp(self._hero.id, self._slot)
    local skillIsUp = false;
    if(showtips and skillIsUp == false)then
        skillIsUp = true;
    end
    self.skillRedpoint:SetVisible(skillIsUp)
end

function WitchSkillNewLayer:onLayerFadeInEndCall()
    Guide:ContinueGuideEvent(self.__cname)
end

return WitchSkillNewLayer

